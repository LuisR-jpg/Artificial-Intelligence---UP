//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/FPSActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPSActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPSActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPSActions"",
    ""maps"": [
        {
            ""name"": ""FPSMap"",
            ""id"": ""a13bb5c2-9c85-45fc-968e-c46bfc46f90d"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8794d636-65e8-414f-8ea8-b48dddadc8c5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b259daca-48e4-4b4a-955d-7264f9b23ff0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSMap
        m_FPSMap = asset.FindActionMap("FPSMap", throwIfNotFound: true);
        m_FPSMap_MoveCamera = m_FPSMap.FindAction("MoveCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSMap
    private readonly InputActionMap m_FPSMap;
    private IFPSMapActions m_FPSMapActionsCallbackInterface;
    private readonly InputAction m_FPSMap_MoveCamera;
    public struct FPSMapActions
    {
        private @FPSActions m_Wrapper;
        public FPSMapActions(@FPSActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_FPSMap_MoveCamera;
        public InputActionMap Get() { return m_Wrapper.m_FPSMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSMapActions set) { return set.Get(); }
        public void SetCallbacks(IFPSMapActions instance)
        {
            if (m_Wrapper.m_FPSMapActionsCallbackInterface != null)
            {
                @MoveCamera.started -= m_Wrapper.m_FPSMapActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_FPSMapActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_FPSMapActionsCallbackInterface.OnMoveCamera;
            }
            m_Wrapper.m_FPSMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
            }
        }
    }
    public FPSMapActions @FPSMap => new FPSMapActions(this);
    public interface IFPSMapActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
    }
}
