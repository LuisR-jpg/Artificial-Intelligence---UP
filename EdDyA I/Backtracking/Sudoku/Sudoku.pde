/*int[][] sudoku = {
 {2,1,8 ,0,0,5 ,0,0,0}
 ,{6,5,4 ,0,0,3 ,9,0,0}
 ,{0,0,0 ,0,0,0 ,0,5,0}
 ,{0,8,0 ,0,5,0 ,0,4,0}
 ,{0,0,0 ,0,0,8 ,0,9,2}
 ,{1,0,0 ,6,0,0 ,8,7,3}
 ,{0,6,3 ,9,7,4 ,0,1,0}
 ,{7,0,1 ,0,3,0 ,4,0,0}
 ,{0,0,0 ,0,0,1 ,0,0,0}
 };*/
/*int [][] sudoku = {
  {7, 0, 3, 2, 0, 0, 5, 0, 0}
  , {0, 9, 0, 7, 0, 5, 0, 1, 0}
  , {1, 0, 5, 0, 0, 0, 0, 0, 0}
  , {3, 2, 0, 0, 5, 4, 8, 7, 0}
  , {8, 0, 0, 3, 7, 0, 0, 0, 0}
  , {0, 0, 0, 0, 2, 9, 0, 6, 0}
  , {0, 3, 0, 0, 4, 7, 0, 5, 8}
  , {0, 7, 8, 5, 6, 0, 0, 0, 0}
  , {9, 5, 0, 0, 2, 0, 0, 0, 7}
};
*/
/*int[][] sudoku = {
 {5,0,0 ,6,0,0 ,7,0,9}
 ,{8,0,0 ,0,7,2 ,3,6,0}
 ,{7,4,0 ,0,3,1 ,8,0,0}
 ,{1,8,0 ,0,0,6 ,5,0,7}
 ,{9,5,0 ,3,8,7 ,0,0,0}
 ,{3,6,7 ,0,0,0 ,0,9,8}
 ,{0,9,0 ,0,6,3 ,1,0,5}
 ,{0,7,0 ,8,1,9 ,0,2,3}
 ,{4,0,1 ,0,0,0 ,9,8,0}
 };*/
int[][] sudoku = {
 {9, 6, 0, 1, 0, 4, 0, 5, 8},
 {0, 7, 8, 3, 2, 5, 6, 0, 9},
 {2, 5, 0, 6, 0, 0, 7, 0, 1},
 {8, 0, 1, 4, 0, 7, 5, 0, 6},
 {0, 9, 6, 0, 0, 2, 3, 0, 7},
 {7, 0, 5, 9, 6, 1, 0, 2, 4},
 {5, 0, 0, 7, 1, 0, 4, 6, 2},
 {3, 1, 7, 2, 0, 6, 9, 0, 0},
 {0, 4, 0, 5, 0, 8, 0, 7, 3}
 };
/*int[][] sudoku = {
 {9, 6, 0, 1, 0, 4, 0, 5, 8},
 {0, 7, 8, 3, 2, 5, 6, 0, 9},
 {2, 5, 0, 6, 0, 0, 7, 0, 1},
 {8, 0, 1, 4, 0, 7, 5, 0, 6},
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0}
 };*/
/*int[][] sudoku = {
 {7, 4, 0, 0, 0, 0, 0, 9, 0},
 {1, 0, 6, 0, 4, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 7, 0, 5, 0},
 {0, 0, 0, 4, 0, 3, 0, 0, 5},
 {8, 0, 0, 0, 1, 0, 0, 0, 2},
 {6, 0, 0, 9, 0, 5, 0, 0, 0},
 {0, 1, 0, 8, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 9, 0, 1, 0, 7},
 {0, 7, 0, 0, 0, 0, 0, 8, 4}
 };*/
/*int[][] sudoku_solved = {
 {9, 6, 3, 1, 7, 4, 2, 5, 8}, 
 {1, 7, 8, 3, 2, 5, 6, 4, 9}, 
 {2, 5, 4, 6, 8, 9, 7, 3, 1}, 
 {8, 2, 1, 4, 3, 7, 5, 9, 6}, 
 {4, 9, 6, 8, 5, 2, 3, 1, 7}, 
 {7, 3, 5, 9, 6, 1, 8, 2, 4}, 
 {5, 8, 9, 7, 1, 3, 4, 6, 2}, 
 {3, 1, 7, 2, 4, 6, 9, 8, 5}, 
 {6, 4, 2, 5, 9, 8, 1, 7, 0}
 };*/
/*int[][] sudoku = {
 {1, 2, 3, 4},
 {3, 4, 1, 2},
 {2, 1, 4, 3},
 {4, 3, 2, 1}
 };*/
/*int[][] sudoku = {
 {1, 0, 3, 4},
 {3, 0, 1, 2},
 {2, 1, 0, 3},
 {4, 3, 2, 1}
 };*/
int sq = (int)sqrt(sudoku[0].length), l = sudoku[0].length, c = 1;
void setup() {  
  background(255);
  size(630, 630);
  backtracking(0, 0);
}
void backtracking( int y, int x ) {
  if ( checar() ) {
    print_sudoku();
    board();
    return;
  }
  if ( y >= l ) return;
  if ( x >= l ) {
    backtracking( y+1, 0 );
    return;
  }
  if ( sudoku[y][x] == 0 ) {
    for ( int i = 1; i <= l; i++ ) {
      if ( evaluar( y, x, i ) ) {
        sudoku[y][x] = i;
        print_sudoku();
        backtracking( y, x+1 );
        sudoku[y][x] = 0;
      }
    }
  } else backtracking( y, x+1 );
}
boolean evaluar(int a, int b, int c) {
  boolean[] arr = new boolean[l+10];
  boolean[] arr2 = new boolean[l+10];
  boolean[] arr3 = new boolean[l+10];
  for ( int i = 0; i < l; i++ ) {
    arr[sudoku[a][i]] = true;
    arr2[sudoku[i][b]] = true;
    arr3[sudoku[(i/sq)+((a/sq)*(sq))][(i%sq)+((b/sq)*(sq))]] = true;
  }
  if ( arr[c] || arr2[c] || arr3[c] ) return false;
  else return true;
}
void print_sudoku() {
  println();
  for ( int i = 0; i < l; i++ ) {
    for ( int j = 0; j < l; j++ )
      print(sudoku[i][j] + " ");
    println();
  }
}
boolean checar() {
  for ( int i = 0; i < l; i++ )
    for ( int j = 0; j < l; j++ )
      if ( sudoku[i][j] == 0 ) return false;
  return true;
}
void board() {
  background( (int)random(155, 250) );
  noFill();
  stroke( 0 );
  for ( int i = 0; i < l; i++ ) {
    for ( int j = 0; j < l; j++ ) {
      if ( sudoku[j][i] == 0 ) fill(0);
      rect( i*70, j*70, 70, 70 );
      if ( i % sq == 0 ) {
        strokeWeight(5);
        line( 0, i*70, 630, i*70 );
        line( i*70, 0, i*70, 630 );
        strokeWeight(1);
      }
      noFill();
    }
  }
  fill( 0 );
  textSize(50);
  for ( int i = 0; i < l; i++ ) {
    for ( int j = 0; j < l; j++ ) {
      text( sudoku[j][i], ((i)*70)+20, ((j+1)*70)-15 );
    }
  }
}
