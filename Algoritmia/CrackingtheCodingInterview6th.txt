Big O
  Metric used to describe the efficiency of algorithms.
  Big O. Upper bound
  Big Omega. Lower bound
  Big theta. Tight bound
  Space Complexity.
    It is different to the time complexity.
  Drop the constants.
    Big O notation only describes the slope.
  Multi-part algorithms.
    O(A + B)
      for(auto x: a) cout << 1;
      for(auto x: b) cout << 0;
    O(AB) 
      for(auto x: a) 
        for(auto y: b) 
          cout << 10;
  Amortized Time
    If complexity changes depending on the case, try to consider both complexities and generalize.
  logn runtimes
    Appears commonly the number of elements is divided by two.
  Recursive runtimes
    When you have a recursive function that makes multiple calls, the complexity is often O(branches^depth)

    Example 15
