#Para Buscar java se 8 (nombre de la clase). Vinculo mantenido por oracle.
Es necesario incluir el pqt java.util
	import java.util.*;
FOR MEJORADO
	for( int x: arreglo ){
		//Recorre cadas posición del arreglo
	}
SCANNER
	import java.util.Scanner;
	Scanner nombre = new Scanner(System.in);
	Metodos de la clase Scanner
		boolean <Nombre>.hasNext();
		int <Nombre>.nextInt();
		double <Nombre>.nextDouble();
		String <Nombre>.nextLine(); 
	Problema con Scanner.
		Cuando el usuario introduce un número y después presiona enter, input.nextInt() 
		solamente lee el número y no el fin de línea
		Cuando se ejecuta input.nextLine(), este comando lee el fin de línea que se encuentra
		aún en el búfer de la primera entrada.
		Utilice input.nextLine() inmediatamente después de input.nextInt();
ARREGLOS
	DECLARACION E INICIALIZACION
		1. Tipo_de_variable[ ]   Nombre_del_array = new  Tipo_de_variable[dimensión];
		2. Tipo_de_variable[ ] Nombre_del_array
		   Nombre_del_array = new Tipo_de_variable[dimensión];	
	
		int [] array = {1,2,3,4,5};
		int array [] = {1,2,3,4,5};
	SORTING 
		java.util.Arrays;
		Arrays.sort(array);
CADENAS
	int parseInt(String s) //Convierte una cadena de texto en entero
	double parseDouble(String s) //Convierte una cadena en double
OTROS
	Arrays.toString(arr);
METODOS
	Todo método debe estar dentro de un objeto.
	Recibe y devuelve valores.
		Es posible mandar un numero indeterminado de elementos. 
			Para eso en el argumento se pone "tipo... nombre" sin comillas.
			Dentro de la función es tratado como un arreglo.
	Declaracion.
			modificadores Tipo NOMBRE(argumentos){
			}
		Los modificadores pueden ser public o static
		Los argumentos que se mandan pueden ser por.
			Valor. Se manda una copia del argumento que fue enviado. (tipos primitivos)
			Referencia. Por referencia se pasa la variable completa, se puede modificar. (objetos)
EXCEPCIONES
	Cuando un programa viola las restricciones semánticas del lenguaje se produce un error, esto es comunicado mediante una exepcion.	
	Existentes:
		FileNotFoundException
		OutOfMemoryError
		Exception //Atrapa todas
		...

	Trabajo de excepciones:
		Try_Catch:
			try{
				//Todo aquello que pueda tener una excepcion
			} catch( /*Ejemplo*/ FileNotFoundException ex ){ //Las excepciones que podrían aparecer como objeto
				//Que hacer en caso de encontrar la excepcion pasada por argumentos
			} catch(){ //En caso de buscar otra excepcion

			}
REGULAR EXPRESSIONS:
	Secuencias.	
		. 	Comodin, cualquier string
		\.	Punto
		\n	Salto de linea
		\d	Conjunto de caracteres
		\D	Todo lo que no sea un digito
		[nmp]	n, m o p
		[^nmp]	Cualquier caracter, excepto n, m o p
		[x-z]	Rango de la x a la z
		\s	Espacio en blanco
		\w+	Cualquier conjunto de caracteres //\w+bre\b Retorne las palabras que terminen con bre
		\p{L}	Busca letras incluyendo latinas
		\Q...\E Toma "..." literalmente

PRIMEROS PASITOS:
//Tabla de verdad
public class MyClass {
    public static void main(String args[]) {
      boolean A = false, B = false, C = false;
      for( int i = 1; i < 9; i++ ){
          System.out.printf("%s\t%s\t%s\=\t%s\n", A, B, C, B&C);
          if( i % 4 == 0 ) A = !A;
          if( i % 2 == 0 ) B = !B;
          if( i % 1 == 0 ) C = !C;
      }
    }
}
//Indeterminados elementos en una funcion (to get the average).
class Main{
	public static void main(String[] args){
		double num[] = {1, 2, 3, 4, 5, 7, 8, 9};
		double resultado = promedio(3, 5, 7);
		System.out.println(resultado);
	}
	public static double promedio(double... arr){
		double suma = 0;
		for( int i = 0; i < arr.length; i++ ){
			suma += arr[i];
		}	
		return suma/arr.length;
	}
}

REAL POO
Mainframe. Computadora muy grande, en vez de una computadora individual para cada uno, se conectaban todos a una sola.
¿Que es un objeto?
	Encapsulacion generica de datos y procedimientos para manipularlos.
	Todo en java es un objeto
	An object is a chunk of memory bundled with the code that manipulates that memory.
Encapsulacion.
	Los atributos no están para que sean modificados.
	Para protección del objeto sin matarlo
Clase
	Es el diseño a partir del cual se crean los objetos individuales
	Tiene una palabra reservada en lenguaje java denominada class
Instanciacion 
	Determinar una clase en uno o varios objetos concretos
		Clase	 	objeto 		instanciacion		constructor
		Scanner 	entrada		new Scanner	(	System.in	);
Es de buena educacion reservar memoria antes de usarla
Java inicializa a cero los valores de tipos primitivos.
Constructor
	Cuando se quiera instanciar un objeto siempre se debe llamar a un constructor
	Son parecidos a los metodos: aceptan parámetros y contienen código
	No son métodos ya que no devuelve ningún valor
Consultos y órdenes
	Getters, Setter
	Metodos que usa un objeto para comunicarse con otros
	Permiten conocer y eventualmente modificar atributos del objeto, sólo si está permitido.
Recolector de basura
	Determina los espacios de memoria que ya no van a ser utilizadas.
	Posteriormente reasigna dicho espacio de memoria de acuerdo con las necesidades del programa
	Le quita al programador la necesidad de liberar memoria manualmente
Variables de instancia 
	Son variables que pertecen algo a de tipo objeto
Herencia
	Mecanismo que crea una clase a partir de otra preexistente, copiando algunas de sus 
	características. Esto permite reutilizar código sin ponerlo en riesgo de modificaciones
	Superclase-Subclase
		Las subclases heredan los atributos
	Tipos de herencia
		Simple
			Una subclase hereda de una superclase
		Múltiple
			Una subclase puede heredar de varias superclases simultáneamente
			Not in java.
		Jerárquica
			Una misma clase puede tener varias subclases
		Multinivel
			Las subclases también pueden heredar a otras subclases.
	extends 
		Class Perro extends Animal{
			//atributos 		   	/*nuevos o
			//metodos		 	sobreescritos*/
		}	
	Un miembro no puede ser heredado si la subclase declara otro con el mismo nombre
	En el caso de los atributos, el correspondiente a la subclase oculta de la superclase (hide)
	En el caso de los métodos, el correspondiente a la subclase anula el de la superclase (override)
	Las subclases heredan solamente los miembros de la superclase declarados como public o protected
	Los miembro de tipo private de la superclase NO son heredados a la subclase
	Una subclase heredará miembros sin especificador de acceso, siempre que se encuentren en el mismo
		paquete que la superclase
	Las subclases no heredan constructores de las superclases
	La clase siempre tiene acceso a sus propios atributos
	@Override
		Antes de la declaración de un método hace que se anule el metodo de la clase padre.
	Super
		Se utiliza para llamar al constructor de la superclase inmediata.
		O para acceder a algún miembro de la superclase, oculto o anulado por la subclase
		La llamada al constructor de la superclase debe ser la primera línea dentro del constructor de la
			subclase.
			
Miembro 
	Son atributos y metodos

Composición
	Similar a la herencia.
	(Herencia) Una casa ES un edificio
	(Composición) Una casa TIENE una recamara
Abstractos
	//Representadas con cursivas
	Son métodos declarados, pero no implementados.
	Clase Abstracta.
		Aquella que tiene al menos un método abstracto
		public abstract class GraphicObject{
			//Campos 
			//Metodos
			abstract void draw();
		}
	El propósito de las clases abstractas es conseguir que varias clases (sus hijas) tengan un diseño común.
	Garantiza que todas las subclases tendrán métodos con el mismo nombre y función (aunque se implementen distinto) 
		//El objeto perro ladra, pero cada uno ladra distinto.
	Puede heredar, pero no instanciar
	Esto es porque están incompletas: contienen métodos abstractos
	Cuando heredan, la subclase debe implementar todos los métodos de la clase abstracta
	De otro modo, la subclase también debe declararse como abstract
Clase concreta
	Las de toda la vida
Interfaz
	Clase donde todos sus métodos son abstractos
	Atributos
		Deben llamarse static final y con un valor inicial ya que funcionan como
		constantes. Por eso, su nombre va en mayúsculas
		Ejemplo
			interface Nomina{
				public static final String EMPRESA = "R.S.A.";
				public void detalleDeEmpleado( Nomina obj );
			}
	Se usa implements, en lugar de extend. Se pueden implementar varias interfaces separadas con ","
		Ejemplo
			interface Empleado implements Nomina{
				...
			}
	------------------------------------------------------------
			class Perro implements Animal, mascota{
				...
			}
	La clase que implementa una interfaz tiene dos opciones:
		1. Implementar todos los métodos de la interfaz
		2. Implementar solo algúnos de los métodos de la interfaz pero en ese
			caso se declara como abstracta
Operador CAST
	Para tipos primitivos
		Narrowing (reduccion)
			Convertir a un dato de menor precision implica pérdida de información
	Para objetos
		Para conversión de objetos de distintas clases requiere que estén relacionadas por herencia.
			Para convertir de subclase a superclase, se hace la conversión de forma automática
			Ejemplo.
				Circle a;
				Cylinder b = new Cylinder();
				a = b; //Conserva la informacion cilindro, guardado en circulo
			De superclase a subclase, es necesario el operador cast
				Si la clase padre A no contiene suficiente información para convertirse en la clase hija B
				se obtendrá una exception del tipo classCastException
				Ejemplo.
					Cylinder a;
					Circle b = new Circle();
					a = (Cylinder) b; //Exception
Polimorfismo
	Del griego muchas formas.
	Asegura que para un objeto específico, se llame el método correcto cuando dicho objeto se hace pasar por otro mas general.
	Java permite tratar un objeto de clase hija como objeto de su clase padre.
	Una referencia a una superclase puede apuntar a un objeto de su subclase
	El polimorfismo requiere utilizar referencia de un tipo mas amplio que el objeto al que apunta
	Significa que pueden tenerse varios métodos con el mismo nombre en la misma clase
		Sobrecarga (overloading)
			2 o más métodos con distintos argumentos.
		Anulacion (overriding)
			Reemplazar un método heredado por otro
instanceof
	Devuelve verdadero o falso dependiendo de si un objeto es instancia de una clase particular.
	//entrada instanceof Scanner
Modificadores
	Static
		Con esto se determina que el atributo no pertenece a las instancias de una clase (objetos sino a la clase misma)
		Como consecuencia para acceder a los atributos static no hace falta instancia
		Una variable estática es común a todas las instancias de la clase.
		Ejemplo.
			Math.PI
		Un metodo static de una clase padre no se puede anular desde una clase hija
		Estos métodos están escondidos para las clases hijas
	Final
		Modifica variables, metodos o clases
		Convierte cualquier variable en constante
		Se puede heredar pero no anular (testamento)
		Los métodos llamados desde un constructor deben ser de tipo final
		En clases evita que pueda heredar
	Object
		Primera clase en la jerarquía de java
		Todas las clases heredan de esta implícitamente
		Todos los objetos en Java, incluyendo los arreglos, implementan los métodos de esta clase
		Métodos:
			clone() //Copia del objeto en cuestion
			equals() //Compara dos objetos
			finalize() //Usada cuando se acerca el recolector de basura
			hashCode() //Clave para referenciar información
			toString()
Genericidad
	Crear clases o métodos para varios tipos de objeto.
	Util para detectar errores desde compilacion
	Declaración
		class Nombre<T>{
			T variable; //Atributo
			T metodo();
		}
	Clases Genéricas
		Nombre<tipo> ins = new Nombre<tipo>
		Una vez se le pasa el dato, las T se borran y son reemplazadas por el tipo de dato pasado
		Tambien es posible tener clases genéricas de varios tipos
			class Nombre<T,U>{
				T vat;
				U var;
			}
	Metodos Genéricos
		//identificadores <T> tipo_de_dato_para_regresar nombre(tipo args)
		public static <T> T metodo(T args){
			T variable1; //Puede ser concreto o tipo genérico
			//Implementacion
		}
		Llamada
			String cad = "Genericidad";
			a) <String>metodo(cad);
			b) metodo(cad);
		//Mas de un tipo de dato
		public static <T,U> T metodo(U arg){
		}
	Letras que se usan (No importante)
		E Elemento
		N Numero	
		T tipo
		K, V Clave y valor (map)
		S, U... Otros
	Util para establecer limites inferiores y superiores
		<T extends A>
			Acepta cualquier subclase del objeto A
		<T super A>
			Acepta cualquier superclase del objeto A
	Herencia
		Una clase puede heredar de otra clase genérica
		Manteniendo la genericidad del clase padre
			class Caja<T> extends Contenedor<T>
		Reducir la genericidad
			class Caja<T extends Valorable> extends Contenedor<T> //Extends funciona aquí para herencia o interfaces
		Especificando un tipo concreto
			class Caja extends Contenedor<Valorable>
	¿Polimorfismo?
		***ArrayList<Object> lst = new ArrayList<String>(); //ERROR incompatible types: No hay polimorfismo
		***List<String> strLst = new ArrayList<String>(); //ERROR
		***List<Object> objLst = strLst; //ERROR
	Comodín <?>
		List<Number> lst = new ArrayList<Integer>(); //NO FUNCIONA no hay polimorfismo
		En cambio se usa
			List<?> lst = new ArrayList<Integer>(); //Util
		Mas correcto es
			List<? extends Number> lst = new ArrayList<Integer>();
	


TERMINA TEORIA PROGRAMACION ORIENTADA A OBJETOS
Archivos JAR (Java ARchive)
	Sirven para almacenar otros archivos de manera comprimida
	Comúnmente se utilizan para concentrar en un solo archivo todos los recursos necesarios para correr una aplicacion de Java (clase, imágenes, datos, etc.)
	El algoritmo para comprimir JAR = ZIP 
	Estos archivos incluyen de manera autompatica una carpeta llamada META-INF, dentro de esto se genera un archivo de texto llamado MANIFEST.MF que puede
		incluir informacion de tipo (UTF-8)
	Creacion de archivos JAR
		jar cf nombre.jar archivos
			C. Significa create
			F. Cada modificacion va a un archivo
			Nombre. Con extensión opcional pero recomendada
			archivos. Lista de archivos a incluir, separados por espacios
	Extraccion de archivos
		jar xf nombre.jar [archivos]
			x. Indica que se van a extraer archivos
			El jar no se modifica, solo se copia
			***jar.exe sobreescribe todo con el mismo nombre
	Jar como aplicaciones
		java -jar nombre.jar
			Avisa que la aplicacion se encuentra en formato JAR
	MANIFEST.MF
		Se genera automáticamente al crear un archivo JAR
		Codificado en UTF-8
		Contiene la siguiente informacion
			Manifest-Version: 1.0
			
		Para ejecutables se debe incluir
			Main-Class: nombre_de_la_clase_principal
			(Sin.class y con un salto de linea al final)
	Una clase no puede acceder directamente a otros archivos entro del mismo JAR
	Se requiere utilizar:
		(new Object()).getClass().getResource("/4.jpg")
		(new Object()).getClass().getResourceAsStream("/A.txt")
SWING 	
	Swing es un paquete de Java que contiene las clases necesarias para crear interfaces gráficas
	4 clases.
		JButton.
			Se le puede poner texto, o imágen, se puede presionar
		JFrame.
			Marco para acomodar las cosas, permite que todo esté acotado en un rectángulo.
			Incluye marquito azul con minimizar, maximizar tamaño o cerrar. (JPanel no incluye esto)
		JLabel.
			Sólo muestra texto
		JTextfield.
	Clases Genéricas
	JComponent-Hierarchy
	Layouts
		LayoutManager. 	
			Encargado de poner los elementos dentro del panel o frame
		Flow Layout.	
			Coloca los componentes en una sola línea. Comienza una nueva si el panel no es suficientemente ancho
			Este es el layout por omisión para la clase JPanel
			FlowLayout()
			FlowLayout(int align)
			FlowLayout(int align, int hgap, int vgap)
			Align: (alineacion de los botones)
				LEFT, RIGHT, CENTER, LEADING, TRAILING
				f.setLayout(new FlowLayout(FlowLayout.LEADING, 2, 2));
		Border Layout
			Coloca los componentes en cinco áreas: arriba, abajo, izquierda, derecha, centro. Sólo acepta un componente por área
			JFrame.add(component, BorderLayout.CENTER)
		Grid Layout
			Hace que todos los componentes tengan el mismo tamaño y los acomoda de acuerdo a un número especificado de renglones y columnas
			GridLayout()
			GridLayout( int rows, int cols )
			GridLayout( int rows, int cols, int hgap, int vgap)
		Box Layout
			Coloca los componentes en una sola columna o línea
			Requiere un contenedor en el constructor*
			BoxLayout( Container target, int axis )
			jaja.setLayout(new BoxLayout(jaja.getContentPane(), BoxLayout.Y_AXIS));
				X_AXIS
				Y_AXIS
				LINE_AXIS
				PAGE_AXIS
		JPanel
			Similar a JFrame, funciona como contenedor intermedio. permite mayor flexibilidad en el posicionamiento de componentes dentro de la interfaz gráfica.
			JPanel()
			JPanel( LayoutManager layout )
		Grid Bag Layout //Grid pero un componente puede ocupar mas de una casilla
		Card Layout// Permite cambiar el acomodo en función de algo

	Action Listener
		Interfaz, no clase concreta	
	...
		Implementacion
			public class Clase implements ActionListener{
				public void actionPerformed( ActionEvent e ){
					//Codigo a ejecutar
				}
			}
	Componentes
		JPanel
			Gestionar acomodo de los componentes dentro de un marco
		JLabel
			JLabel()
			JLabel( Icon Image )
			JLabel( Icon image, int horizontalAlignment )
			JLabel( String text )
			JLabel( String text, Icon icon, int horizontalAlignment )
			String getText()
			void setText(String text)
		JButton
			JButton()
			JButton( Icon icon )
			JButton( String text )
			JButton( String text, Icon icon )
			public void addActionListener( ActionListener l)
		JTextField //Para introducir texto breve
			JTextField()
			JTextField( int columns )//Ancho
			JTextField( String text )
			JTextField( String text, int columns )
			void addActionListener( Action listener l)
			void setFont(Font f)
			public void setText(String t)
			void setColumns(int columns)
		JCheckBox
			JCheckBox()
			JCheckBox(Icon icon)
			JCheckBox(Icon icon, boolean selected)
			JCheckBox(String text)
			JCheckBox(String text)
			JCheckBox(String text, boolean selected)
			JCheckBox(String text, Icon icon)
				JCheckBox(String text, Icon icon, boolean selected)
			public void SetSelected(boolean b)
			public boolean isSelected()
		JRadioButton	
			Lo unico que cambia es la forma
			Mismos metodos //Usando JRadioButton
		ButtonGroup
			//Controlar botones en grupo
			void add(AbstractButton b)
			void clearSelection()
			ButtonModel getSelection() (mejor no)
				https://docs.oracle.com/javase/7/docs/api/javax/swing/ButtonModel.html
		JComboBox
			Lista desplegable, para seleccionar solo un elemento
			JComboBox()
			JComboBox(E[] items) //Representa genericidad, E[] arreglo de cualquier tipo
			object getSelectedItem()
			int getSelectedIndex()
				static JComboBox hola = new JComboBox
				hola.addActionListener( new ActionListener(){
					@Override
					public void actionPerformed(ActionEvent e){
						...
						lb.setText((String)com.getSelectedItem());
					}
				});
		JList
			Lista de elementos, varios elementos seleccionables
			JList()
			JList(E[] listData)
			int[] getSelectedIndices()
			int getLeadSelectoinIndex() //Solo el primero que fue seleccionado
			E getSelectedValue() //Un elemento
			List<E> getSelectedValuesList() 
		JTextArea
			Similar a campo de texto, diferencia es el tamaño
			JTextArea()
			JTextArea( int rows, int columns )
			JTextArea( String text )
			JTextArea( String text, int rows, int columns )
			public String getText()
			public void setText(String t)
			public void append(String str)// Append, añadir
		JScrollPane
			Pergamino enrollado, panel muy grande navegable
			JScrollPane()
			JScrollPane( Component View )
			JScrollPane( Component View, int vsbPolicy, int hsbPolicy )
			JScrollPane( int vsbPolicy, int hsbPolicy ) //Vertical/Horizontal scroll bar policy
			VERTICAL_SCROLLBAR_ALWAYS
			VERTICAL_SCROLLBAR_AS_NEEDED
			VERTICAL_SCROLLBAR_NEVER
			HORIZONTAL_SCROLLBAR_ALWAYS
			HORIZONTAL_SCROLLBAR_AS_NEEDED
			HORIZONTAL_SCROLLBAR_NEVER
ARCHIVOS
	La clase file se comunica por medio de flujos. No es de lectura, escritura, sino para conocer meta-información.
	Maneja dos elementos, archivos y carpetas.
	No es la clase de tipo static, por lo que debe ser instanciada.
	Es necesario un objeto de la clase file.
		import java.io.File;
		import java.io.IOException; 
		File arch = new File("File.txt");
		//Puede ser que el archivo no exista, pero eso no impide crear el objeto arch
		//De hecho, si se busca crear el archivo primero debe instanciarse a la clase File.
		Métodos.
			boolean createNewFile()
			boolean delete() //CUIDADO. No pide confirmación.
			boolean exists()
			boolean isDirectory() //Carpeta
			boolean isFile() //Archivo
			long length() //Saber hasta donde es necesario leer
			String[] list() //Similar a 'dir' en consola
			File[] listFiles() 
			File[] lsitFiles(FileFilter filter)
			File[] listFiles(FilenameFilter filter) //Filtrar una lista de elementos
			accept(File dir, String name)
	Clase FileWriter
		Permite escribir cadenas en un archivo de manera sencila-
		Todo objeto de FileWriter se debe cerrer con el metodo close()
		Metodos 
			FileWriter(File file)
			FileWriter(File file, boolean append)
			FileWriter(String name)
			FileWriter(String name, boolean append)
			(HEREDADOS) *Avientan IOException
				void write(String str) 
				void close() 
	Clase FileReader
		FileReader(String fileName)
		FileReader(File file)
		int read() *IOException
		int read( char[] cbuf, int offset, int length ) *IOException 
			//Arreglo de caracteres de lo que lee, a partir de donde se guarda en arr, cuantos char
		void close *IOException
Flujos
	La información puede fluir de varios origenes a distintos destinos, y esta información se distribuye 
	Clases.
		OutputStream. Clase abstracta representa todos los bytes de salida.
			Metodos.
				close() //Necesario cada de que sea usado
				raw() //Escribir datos crudos
		InputStream. Clase abstracta representa todos los bytes de entrada.
			Metodos.
				available() //Devuelve un aproximado de cuantos bytes faltan por ser leidos
				close() //
				read() //
				skip() //Permite saltarse una secuencia de bytes
		DataOutputStream. Clase concreta
			Metodos. 
				write()
				write...(Tipodedato)
		DataInputStream. Clase concreta
			Metodos.
				read()
				read...(Tipodedato)
				readLine() //Recomendado que no se use
		BufferedInputStream. Flujos que incorporan buffers para mejorar la eficiencia.
		BufferedOutputStream. Flujos que incorporan buffers para mejorar la eficiencia.
		BufferedReader. Flujos que incorporan buffers para mejorar la eficiencia.
		BufferedWriter. Flujos que incorporan buffers para mejorar la eficiencia.
		FileReader. Solamente leen caracteres.
		FileWriter. Solamente escriben caracteres.

	Buffer: Visto como una camioneta, en vez de estar llevando y recogiendo personas a cada rato, es mejor esperar a un cierto numero de elementos
	y una vez llegado se hace un viaje mas provechoso.

Archivos de acceso aleatorio.
	2 Tipos de acceso: Secuencial y aleatorio.
	Clase RandomAccessFile.
		Permite leer y escribir en archivos de acceso aleatorio (similar a arreglo de bytes)
		Apuntador de archivo (file pointer) determina el byte a leer o escribir
		Cada operación de lectura/escritura hace avanzar el apuntador de archivo
		Constructores: 
			RandomAccessFile("nombre", "modo");
			Modos: "rw" Abrir para lectura escritura
		Metodos: 
			byte readByte()
			float readFloat()
			int read(byte[] b)
			void write(byte[] b)
			void writeDouble(double v)
			void seek(long pos) //Posicion dentro del archivo
			void close() //Si no lo cierro, puede que lo que haya escrito no aparezca
			long getFilePointer() //Para saber a qué numero de byte me refiero
			void setLength(long newLength) //Decirle que cambie la longitud de archivo

raiz de la longitud y eso entre 3
entre 3 y luego raíz

Imagenes BMP
	Profundidad de color. 
		1-bit B/W. 2 colors
		8-bit B/W. 256 grays
		8-bit COLOR. 256 colors
		24-bit COLOR. 16 million-colors
	Endianness (extremidad)
		Designa el orden en que se almacenan los datos con mas de un byte.
		Little-endian. Byte menos significativo a la derecha
		Big-endian. A la izquierda
		Ejemplo. 1,295,788,826 -> Little-endian: (4D-3C-2B-1A), Big-endian: (1A-2B-3C-4D)
	Destripar BMP.
		Bytes			Significado
		00-54			Encabezado	 		//Determina que algún programa pueda leer nuestra imagen
			00-01			Tipo de archivo 	//42 4D = "BM" --> Bitmap
			02-05			Tamaño del archivo 	//En bytes
			Reservados		No idea
			10-13			Byte en que comienzan los datos de imagen //36 en hexa = 54 (ahí comienza)
			14-17 			Tamaño del encabezado 	//En bytes
			18-21			Anchura de la imagen 	//En pixeles
			22-25			Altura de la imagen 	//En pixeles	
			26-27			Numero de capas que tiene la imagen
			28-29			Profundidad del color 	//En bits
			54-56			Color del primer pixel 	//B-G-R (De abajo a la izquierda)
									//El ultimo pixel es de arriba a la derecha
tamaño de la imagen, tamaño del archivo y alto y ancho

Bases de Datos con JAVA
	Flat File Database
		Data stored in plain files
		Separated by commas, tabs
		Simple data
	Non-Relational Database
	Relational Database
	Para mayor flexibilidad se usa.
		Database management systems.
			Del cual existen dos tipos.
				NonRelational Databases (NoSQL)
				Relational Database(SQL)
					Tres tablas separadas.
						Customer's Information
						Billing Information
						Images Uploaded
	SQL stands for Structured Query Languaje.
		Used to communicate with database.
		Only for relational databases.
		Comandos.
			Definicion
				Create //Añadir un objeto a la base de datos
				Alter //Modificar objeto
				Drop //Eliminar
			Manipulacion
				Insert //Añadir un registro
				Update //Modificar un registro
				Delete //Eliminar registros
			Recuperacion
				Select //Obtiene registros de una o mas tablas
	SQLite Studio
		Para administrar bases de datos SQLite de manera sencilla
		Portable
		Interfaz intuitiva
		Permite exportas (csv, html, json)
		Codigo abierto
	SQLite
		Biblioteca que implementa base de datos de tipo SQL
		No requiere configuración
		No requiere servidor
		Fue hecha para la simplicidad.
		Código abierto y gratis
		Interfaz de programación para mas de 30 lenguajes.
		Se guarda todo en un solo archivo multiplataforma
		Mas eficiente que el administrador de archivos nativo.
		Ventajas.
			Facil
			No requiere servidor
			Ocupa menos de 400kb
			Sin dependencias externas
		Desventajas.
			Limitada a 140TB
			No se puede dar servicio a varios clientes, ni a varios usuarios.
			No es 100% compatible con SQL
	JDBC. Java DataBase Connectivity. 
		Esta interfaz de programación permite que java acceda a sistemas de gestión de base de datos.	
			


				
Colecciones y Conjuntos
	Me interesa que si conservo muchas cosas puedan estar organizadas y pueda acceder facilmente a ellos.
	Java Collections Framework
		Clases que almacenan referencias a objetos, e implementan estructuras de datos (listas, tablas de dispersión, conjuntos, etc)
		El conjunto de interfaces, clases y algoritmos que nos permiten trabajar con estructuras de datos se agrupan bajo el nombre Java Collections Framework
	Colecciones
		Hay varios tipos, no se verán todos
			Conjuntos (Sets)
				Representan conjuntos
				Elementos no ordenados
				No admiten duplicados
					HashSet //Tabla de dispersión
						Implementacion mas rapida
						Sus elementos no se almacenan en un orden definido
					LinkedHashSet //Mantiene un vínculo entre elementos
						Mantiene el orden en que se añaden los elementos al conjunto
						Rapidez media
					TreeSet //No es propiamente un conjunto en Java
						Implementación más lenta
						Sus elementos se añaden de forma ordenada
				Metodos comunes
					boolean add(E e) //Agrega cualquier elemento
					void clear() //Borrar todos los elementos que tenga una colección
					boolean contains(Object o) //Para saber si existe en la colección
					boolean isEmpty() Preguntar si está vacia
					boolean remove(Object o)
					int size() //Numero de elementos
					<T> T[] toArray(T[] a)		
				Metodos exclusivos TreeSet
					boolean addAll //No puede ser cualquier objeto, debe cumplir (Collection<? extends E> c)
					E first()
					E last()
					E floor(E e) //Dice que elemento aparecería antes del argumento en el conjunto
					E ceiling(E e) //Dice que elemento aparecería despues del argumento en el conjunto
			Lists
				Colección que almacenan elementos en orden, admiten duplicados, se puede acceder a cualquier elemento apartir de su index
					ArrayList.
						Similar a un arreglo, implementa metodos que facilitan el uso.
					Vector. 
						Similar a arrayList, pero es util cuando se trabaja con hilos
							boolean add(E e)
							boolean add(int index, E e)
							E get(int index)
							int indexOf(Object o)
							int lastIndexOf(Object o)
							boolean isEmpty
							remove
							toArray				
					LinkedList. 
						FIFO, inserción rápida en un conjunto
							boolean addFirst(E e)
							boolean addLast(E e)
							E getFirst(E e)
							boolean addLast(E e)
							E getFirst()
							E removeFirst()
							E getLast()
							E get(int index)
					Stack.
						LIFO, métodos peculiares
							boolean empty()
							E peek() //Elemento hasta arriba de la pila
							E pop()
							E push(E item)
							int search(Object o) //Busca si existe
												

			Maps (izquierda = clave, derecha = valor)
				Pares, no admite claves duplicadas, acceso aleatorio
				Metodos comunes.
					boolean containsKey(Object key)
					boolean containsValue(Object value)
					V get(Object key)
					V put(K key, V value)
					Object remove(Object key)
					Set<..> entrySet() //Conjunto de pares. Devuelve objeto Entry
					Set keySet() //Conjunto de claves
					set valueSet() //Valores dentro del mapa
				HashMap
					Mejor opción para insertar, buscar y borrar.
					Orden indefinido
				LinkedHashMap
					Lista doblemente vinculada
					Orden de inserción
				TreeMap
					No acepta claves o valores nulos.
					Ordenacion natural		


//EXPOSICIONES
		JToolTip
			Es una pequeña pestaña emergente que sirve de apoyo para la facil interaccion del usuario
		JTextPane
			Modificar estilo de texto, permite añadir componentes e imágenes.
			JTextPane textPane = new JTextPane();
			JTextPane textPane = new JTextPane(StyleDocument doc);
			addStyle( String nm, Style parent);
			getStyle( String nm);
			insertString( int place, String txt, Style st );
			insertIcon
		JFileChooser
			Clase de Java que añade una interfaz de usuario para navegar en las carpetas del equipo
			getSelectedFile()
		JFreeChart
			DialPlot
				Utilizada para representar diagramas circulares. Odometro, o temperatura
				DialPlot()
				DialPlot(ValueDataset dataset)
				void addLayer(DialLayer layer) //Incluye capas
				void addScale(int index, DialScale scale) //El indice por si tiene varias escalas, la primer escala necesita empezar 0
				void addPointer( DialPointer pointer ) //Añade un puntero, "manecilla"
				void addPointer( int index, DialPointer pointer )
				void setDialFrame( DialFrame jaja )
			ScatterPlot
				FastScatterPlot()
				FastScatterPlor( float[][] data, ValueAxis domainAxis, ValueAxis rangeAxis )
			PieChart
				Gráficas de pastel
		JDesktopPane
			Panel para distintos frames
		JOptionPane
			Ventanas emergentes
		JTable
			Genera tablas
			JTable()
			JTable( int numfilas, int numcolumnas )
			JTable( E[][] datostabla, E[] nombrescolumnas )
			JTable( JTableModel modelotabla )
			JTable( Vector datos, Vector nombrescolumnas )
			Object getValueAt( int fila, int columna )
			int getSelectedRow() //Cuando alguien da click
			int getSelectedColumn() //Cuando alguien da click
			void setGridColor(
			void setSelectionBackground(
		JPasswordField
			subClase de JTextField
			JPasswordField()
			char getEchoChar()
			char[] getPassword()
			void setEchoChar(char c) //Definir en vez de puntitos o asteriscos
		JColorChooser
			Interfaz gráfica para seleccionar un color de algo
			JColorChooser() //Selector con color inicial blanco
			
			Color getColor()
			setColor (Color color)
			setColor( int r, int g, int b )
		JTabbedPane
			Pestañas, permite cambiar entre grupos de componentes
			JTabbedPane()
			JTabbedPane( int tabPlacement )//Ubicacion de pestaña (con cual inicia)
			insertTab( String, Icon, Component, String, int )
			setMnemonicAt( int tabIndex, int mnemonic)//Atajo con teclas para las pestañas
			int indexOfTab(String) 
			int indexOfTab(Icon) //Devuelven el index del componente especificado
		JTree
			Presentar informacion de manera jerarquica
			Nodos.
				Padres, hijos, hoja
			JTree(nodoraiz)
			setLeafIcon(ImageIcon)
		JWindow
			No tiene botones como minimizar, cerrar
			JWindow()
			isVisible(boolean b)
		SpringLayout
			Acomoda elementos en el Frame, como si estuvieran unidos en un resorte
			Si se cambia el tamaño de la ventana, se reacomodará proporcionalmente 
		JFormattedTextField	
			JFormattedTextField()
			Object getValue()
			void setValue()
			boolean isEditValid()
			void setDocument(Document doc)
		JToolBar
			JToolBar()
			JToolBar(int orientation)
		JProgressBar
		JSlider
		GroupLayout
			Agrupa componentes de manera jerárquica, tiene dso tipos de grupo. Secuencial y paralelo.
		JSplitPane
		JDatePicker
			Visualizar un calendario y poder seleccionar fechas
		JSpinner
		ProgressMonitor
		JDialog
		JMenu
		JMenuBar
		JMenuItem


LISTADO DE COMPONENTES
JPanel
JLabel
JButton
JTextField - Campo para introducir un texto breve
JCheckBox - Indicador cuadrado para indicar el estado de algún elemento
JRadioButton - Indicador redondo para indicar el estado de algún elemento
ButtonGroup - Utilizado para hacer un grupo con los botones indicadores de estado
JComboBox - Lista desplegable, para seleccionar un elemento
JList - Es una lista de elementos donde varios pueden ser seleccionados
JTextArea - JTextField de mayor tamaño
JScrollPane - Herramienta para añadir barras de navegación dentro de un elemento que no quepa en su espacio asignado

01. CardLayout - Layout en el que sólo puedes ver un elemento a la vez, los elementos se guardan en un stack.
02. DialPlot - Muestra información en un diagrama circular, como un odómetro.
03. *GroupLayout - Agrupa componentes de manera jerárquica; de forma secuencial y/o paralela. Nos permite establecer de manera precisa la posición y el tamaño de cada componente dentro del contenedor.
04. JColorChooser - Hace posible de manera gráfica la selección de colores (Swatches, HSV, HSL, RGB, CMYK).
05. JDatePicker - Librería que nos permite visualizar calendarios e interactuar con ellos.
06. JDesktopPane - Ventana que permite visualizar más ventanas en su interior, como si de un escritorio se tratase. 
07. JDialog - Es una ventana de diálogo que no va a dejar que se interactúe con otra parte del programa hasta que se realice alguna acción sobre ella.
08. JEditorPane - Nos permite editar texto: tamaño, negritas, fuente, etc.
09. JFileChooser - Nos permite visualizar una ventana que nos muestra todos los archivos en la carpeta que seleccionemos, así como seleccionar un fichero.
10. JFormattedTextField - Nos permite definir un formato específico para un campo de texto, para que el usuario introduzca lo que nosotros le pedimos. Podemos definir el tipo de caracter que debe introducirse.
11. JMenu - Permite la creación de menús y submenús para permitir al usuario elegir entre diversas opciones,
12. JOptionPane - Permite la creación de ventanas emergetes que facilitan al usuario con su interacción con el programa.
13. JPassword - Crea un campo de texto especial para contraseñas: oculta (con asteriscos) los caracteres introducidos.
14. JProgressBar - Barra que muestra el progreso de una acción.
15. JSlider - Muestra una barra con distintos valores y un indicador deslizable que apunta a uno de los valores.
16. JSpinner - Pequeño campo de una linea que permite al usuario escoger entre una lista de numeros, a veces acompañado de flechitas
17. JSplitPane - Barrita para dividir el panel o frame
18. JTabbedPane - Herramienta con pestañas para poder seleccionar el elemento que se desea ver
19. JTable - Utilizado para crear tablas con casillas en dos dimensiones
20. JTextPane - Componente tipo editor de texto donde se le pueden agregar imagenes, botones y texto
21. JToolBar - Barra de herramientas, se le puede añadir varios componentes
22. JTree - Herramienta con pestañas desplegables para navegar en un menu
23. JWindow - Ventana emergente sin pestaña de minimizar/cerrar etc
24. PieChart - Gráfica de Pastel
25. ProgressMonitor - Barra que indica progreso
26. JScatterPlot - Grafica una nube de puntos
27. SpringLayout - Estira los componentes dentro del Panel
28. Tooltip - Mensajito sobre el componente //txt.setToolTipText("Inserta el texto, bro")
						