
CopySignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000136e  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000664  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000717  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003061  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  7a:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:

#define PORTADC PORTA
#define PINADC PINA
#define DDRADC DDRA
void ADC_init(){
	ADMUX = 0b01000010; 
  82:	82 e4       	ldi	r24, 0x42	; 66
  84:	87 b9       	out	0x07, r24	; 7
		/*
			7, 6: 01 = Connect AREF to 5v, connect pins 10, 11, 30 and 31
			5: 0 = 10 bits adjusted to the right (using full precision of the ADC)
			2, 1, 0: Specify the PIN to be read in binary
		*/
	SFIOR = 0b00000011;
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	80 bf       	out	0x30, r24	; 48
			Last 3 bits: 
				000 - Free running mode (we ask to do the conversion)
				011 - Compare match timer 0
			When using something different to free running mode: Bit 5 of ADCSRA has to be 1.
		*/
	ADCSRA =  0b11111011; //Fdiv = 32 CON INTERRUPCIONES
  8a:	8b ef       	ldi	r24, 0xFB	; 251
  8c:	86 b9       	out	0x06, r24	; 6
				110		64
				111		128
				Fmicro/Divisor has to be between the valid range.
		*/
			
	DDRADC = 0b00000000;
  8e:	1a ba       	out	0x1a, r1	; 26
	PORTADC = 0b00000000; //ADC doesnt need pull up
  90:	1b ba       	out	0x1b, r1	; 27
  92:	08 95       	ret

00000094 <__vector_14>:
}
ISR(ADC_vect){ //Entra aquí solito después de la conversion
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	uint16_t rej = ADC;
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
		V 0 5
		ADC 0 1023
		OCR2 0 255
	*/
	
	rej >>= 2;
  a6:	96 95       	lsr	r25
  a8:	87 95       	ror	r24
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
	PORTC = OCR2 = rej;
  ae:	83 bd       	out	0x23, r24	; 35
  b0:	85 bb       	out	0x15, r24	; 21
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <Timer0_init>:

void Timer0_init(){
	TIFR = 0b00000011; // Clear interruptions
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	88 bf       	out	0x38, r24	; 56
	TIMSK = 0b00000010; // Set interruption. Bit 0: Overflow; Bit 1: Compare
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	89 bf       	out	0x39, r24	; 57
	//sei();
	TCNT0 = 0; //Counts
  c8:	12 be       	out	0x32, r1	; 50
	OCR0 = 97; //When the compare interruption will be called
  ca:	81 e6       	ldi	r24, 0x61	; 97
  cc:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = 0b00001101; //CTC, last 3 bits to set prescaler (1024)
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	83 bf       	out	0x33, r24	; 51
  d2:	08 95       	ret

000000d4 <__vector_19>:
}
ISR(TIMER0_COMP_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
	
}
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <Timer2_init>:

void Timer2_init(){
	OCR2 = 0;
  e8:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
  ea:	14 bc       	out	0x24, r1	; 36
	DDRD = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  f0:	12 ba       	out	0x12, r1	; 18
	TCCR2 = 0b01101100;
  f2:	8c e6       	ldi	r24, 0x6C	; 108
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void)
{
	sei();
  f8:	78 94       	sei
	ADC_init();
  fa:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	Timer0_init();
  fe:	0e 94 60 00 	call	0xc0	; 0xc0 <Timer0_init>
	Timer2_init();
 102:	0e 94 74 00 	call	0xe8	; 0xe8 <Timer2_init>
	
	DDRC = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0;
 10a:	15 ba       	out	0x15, r1	; 21
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x14>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
