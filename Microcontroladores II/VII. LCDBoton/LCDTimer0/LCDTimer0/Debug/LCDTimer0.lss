
LCDTimer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  00001c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e1  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 94 01 	call	0x328	; 0x328 <main>
  74:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
		LCD_wr_char(c);
	}
}
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	8a 30       	cpi	r24, 0x0A	; 10
  94:	19 f4       	brne	.+6      	; 0x9c <__vector_19+0x20>
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <newLetter>
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <saca_uno>:
  a8:	fc 01       	movw	r30, r24
  aa:	40 81       	ld	r20, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <saca_uno+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <saca_uno+0xa>
  ba:	24 2b       	or	r18, r20
  bc:	20 83       	st	Z, r18
  be:	08 95       	ret

000000c0 <saca_cero>:
  c0:	fc 01       	movw	r30, r24
  c2:	90 81       	ld	r25, Z
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <saca_cero+0xe>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <saca_cero+0xa>
  d2:	20 95       	com	r18
  d4:	29 23       	and	r18, r25
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <LCD_wr_inst_ini>:
  da:	85 bb       	out	0x15, r24	; 21
  dc:	64 e0       	ldi	r22, 0x04	; 4
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	85 e3       	ldi	r24, 0x35	; 53
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
  fa:	83 ec       	ldi	r24, 0xC3	; 195
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_wr_inst_ini+0x24>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_wr_inst_ini+0x2a>
 104:	00 00       	nop
 106:	66 e0       	ldi	r22, 0x06	; 6
 108:	85 e3       	ldi	r24, 0x35	; 53
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 110:	08 95       	ret

00000112 <LCD_wait_flag>:
 112:	84 b3       	in	r24, 0x14	; 20
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	84 bb       	out	0x14, r24	; 20
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	85 e3       	ldi	r24, 0x35	; 53
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 122:	65 e0       	ldi	r22, 0x05	; 5
 124:	85 e3       	ldi	r24, 0x35	; 53
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_wait_flag+0x28>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_wait_flag+0x2e>
 140:	00 00       	nop
 142:	66 e0       	ldi	r22, 0x06	; 6
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 14c:	9b 99       	sbic	0x13, 3	; 19
 14e:	15 c0       	rjmp	.+42     	; 0x17a <LCD_wait_flag+0x68>
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_wait_flag+0x40>
 156:	00 00       	nop
 158:	66 e0       	ldi	r22, 0x06	; 6
 15a:	85 e3       	ldi	r24, 0x35	; 53
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 162:	83 ec       	ldi	r24, 0xC3	; 195
 164:	99 e0       	ldi	r25, 0x09	; 9
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_wait_flag+0x54>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_wait_flag+0x5a>
 16c:	00 00       	nop
 16e:	66 e0       	ldi	r22, 0x06	; 6
 170:	85 e3       	ldi	r24, 0x35	; 53
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 178:	d9 cf       	rjmp	.-78     	; 0x12c <LCD_wait_flag+0x1a>
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	85 e3       	ldi	r24, 0x35	; 53
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 184:	83 ec       	ldi	r24, 0xC3	; 195
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_wait_flag+0x76>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_wait_flag+0x7c>
 18e:	00 00       	nop
 190:	66 e0       	ldi	r22, 0x06	; 6
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 19a:	64 e0       	ldi	r22, 0x04	; 4
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 1a4:	65 e0       	ldi	r22, 0x05	; 5
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 1ae:	84 b3       	in	r24, 0x14	; 20
 1b0:	8f 67       	ori	r24, 0x7F	; 127
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret

000001b6 <LCD_wr_char>:
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	82 95       	swap	r24
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	64 e0       	ldi	r22, 0x04	; 4
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	85 e3       	ldi	r24, 0x35	; 53
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 1d4:	66 e0       	ldi	r22, 0x06	; 6
 1d6:	85 e3       	ldi	r24, 0x35	; 53
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 1de:	83 ec       	ldi	r24, 0xC3	; 195
 1e0:	99 e0       	ldi	r25, 0x09	; 9
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_wr_char+0x2c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_wr_char+0x32>
 1e8:	00 00       	nop
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	85 e3       	ldi	r24, 0x35	; 53
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 1f4:	cf 70       	andi	r28, 0x0F	; 15
 1f6:	c5 bb       	out	0x15, r28	; 21
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	85 e3       	ldi	r24, 0x35	; 53
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 202:	65 e0       	ldi	r22, 0x05	; 5
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 20c:	66 e0       	ldi	r22, 0x06	; 6
 20e:	85 e3       	ldi	r24, 0x35	; 53
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 216:	83 ec       	ldi	r24, 0xC3	; 195
 218:	99 e0       	ldi	r25, 0x09	; 9
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 220:	00 00       	nop
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	85 e3       	ldi	r24, 0x35	; 53
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
 236:	0e 94 89 00 	call	0x112	; 0x112 <LCD_wait_flag>
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 23e:	cf 93       	push	r28
 240:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa de la instrucci?n
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribir? un dato
 242:	82 95       	swap	r24
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	saca_cero(&PORTLCD,RW);
 252:	65 e0       	ldi	r22, 0x05	; 5
 254:	85 e3       	ldi	r24, 0x35	; 53
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	saca_uno(&PORTLCD,E);
 25c:	66 e0       	ldi	r22, 0x06	; 6
 25e:	85 e3       	ldi	r24, 0x35	; 53
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	83 ec       	ldi	r24, 0xC3	; 195
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_wr_instruction+0x2c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_wr_instruction+0x32>
 270:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 272:	66 e0       	ldi	r22, 0x06	; 6
 274:	85 e3       	ldi	r24, 0x35	; 53
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	//saco la parte menos significativa de la instrucci?n
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribir? un dato
 27c:	cf 70       	andi	r28, 0x0F	; 15
 27e:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	85 e3       	ldi	r24, 0x35	; 53
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	saca_cero(&PORTLCD,RW);
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	85 e3       	ldi	r24, 0x35	; 53
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	saca_uno(&PORTLCD,E);
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 54 00 	call	0xa8	; 0xa8 <saca_uno>
 29e:	83 ec       	ldi	r24, 0xC3	; 195
 2a0:	99 e0       	ldi	r25, 0x09	; 9
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_wr_instruction+0x64>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_wr_instruction+0x6a>
 2a8:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2aa:	66 e0       	ldi	r22, 0x06	; 6
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 60 00 	call	0xc0	; 0xc0 <saca_cero>
	LCD_wait_flag();
 2b4:	0e 94 89 00 	call	0x112	; 0x112 <LCD_wait_flag>
}
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_init>:
}



void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 2bc:	8f e7       	ldi	r24, 0x7F	; 127
 2be:	84 bb       	out	0x14, r24	; 20
 2c0:	85 ea       	ldi	r24, 0xA5	; 165
 2c2:	9e e0       	ldi	r25, 0x0E	; 14
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_init+0x8>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_init+0xe>
 2ca:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 6d 00 	call	0xda	; 0xda <LCD_wr_inst_ini>
 2d2:	81 ee       	ldi	r24, 0xE1	; 225
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_init+0x1a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x20>
 2dc:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 6d 00 	call	0xda	; 0xda <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	91 e2       	ldi	r25, 0x21	; 33
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_init+0x2a>
 2ea:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 6d 00 	call	0xda	; 0xda <LCD_wr_inst_ini>
 2f2:	81 e2       	ldi	r24, 0x21	; 33
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_init+0x38>
 2f8:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 6d 00 	call	0xda	; 0xda <LCD_wr_inst_ini>
 300:	91 e2       	ldi	r25, 0x21	; 33
 302:	9a 95       	dec	r25
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_init+0x46>
 306:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
 326:	08 95       	ret

00000328 <main>:
	if(++tim == 10) newLetter = 1;
}

int main(void)
{
	sei();
 328:	78 94       	sei
	LCD_init();
 32a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_init>
	DDRA = 0xFE;
 32e:	8e ef       	ldi	r24, 0xFE	; 254
 330:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8b bb       	out	0x1b, r24	; 27
	OCR0 = 97;
 336:	81 e6       	ldi	r24, 0x61	; 97
 338:	8c bf       	out	0x3c, r24	; 60
	TIMSK =	0b00000010;
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	89 bf       	out	0x39, r24	; 57
	TIFR = 0b00000011;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	88 bf       	out	0x38, r24	; 56
	uint8_t posLCD = 0b10000000, letter = -1;
 342:	cf ef       	ldi	r28, 0xFF	; 255
 344:	d0 e8       	ldi	r29, 0x80	; 128
	
	for(;;){
		if(isClear(PINA, 0)){
 346:	c8 99       	sbic	0x19, 0	; 25
 348:	fe cf       	rjmp	.-4      	; 0x346 <main+0x1e>
			if(newLetter){
 34a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <newLetter>
 34e:	88 23       	and	r24, r24
 350:	19 f0       	breq	.+6      	; 0x358 <main+0x30>
				letter = 0;
				posLCD++;
 352:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t posLCD = 0b10000000, letter = -1;
	
	for(;;){
		if(isClear(PINA, 0)){
			if(newLetter){
				letter = 0;
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	0e c0       	rjmp	.+28     	; 0x374 <main+0x4c>
				posLCD++;
			}
			else {
				letter++;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	8c 0f       	add	r24, r28
				letter %= ('Z' - 'A' + 1);
 35c:	cf e4       	ldi	r28, 0x4F	; 79
 35e:	8c 9f       	mul	r24, r28
 360:	c1 2d       	mov	r28, r1
 362:	11 24       	eor	r1, r1
 364:	c6 95       	lsr	r28
 366:	c6 95       	lsr	r28
 368:	c6 95       	lsr	r28
 36a:	9a e1       	ldi	r25, 0x1A	; 26
 36c:	c9 9f       	mul	r28, r25
 36e:	80 19       	sub	r24, r0
 370:	11 24       	eor	r1, r1
 372:	c8 2f       	mov	r28, r24
			}
			LCD_wr_instruction(posLCD);
 374:	8d 2f       	mov	r24, r29
 376:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_wr_instruction>
			LCD_wr_char(letter + 'A');
 37a:	81 e4       	ldi	r24, 0x41	; 65
 37c:	8c 0f       	add	r24, r28
 37e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_wr_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	83 ed       	ldi	r24, 0xD3	; 211
 384:	90 e3       	ldi	r25, 0x30	; 48
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x5e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x64>
 38c:	00 00       	nop
			_delay_ms(50);
			while(isClear(PINA, 0));
 38e:	c8 9b       	sbis	0x19, 0	; 25
 390:	fe cf       	rjmp	.-4      	; 0x38e <main+0x66>
 392:	83 ed       	ldi	r24, 0xD3	; 211
 394:	90 e3       	ldi	r25, 0x30	; 48
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <main+0x6e>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x74>
 39c:	00 00       	nop
			_delay_ms(50);
			TCNT0 = tim = newLetter = 0;
 39e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <newLetter>
 3a2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a6:	12 be       	out	0x32, r1	; 50
			TCCR0 = 0b00001101;
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	83 bf       	out	0x33, r24	; 51
 3ac:	cc cf       	rjmp	.-104    	; 0x346 <main+0x1e>

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
