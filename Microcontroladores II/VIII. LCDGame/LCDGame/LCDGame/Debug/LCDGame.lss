
LCDGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000004f0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013c4  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000667  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000625  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e0       	ldi	r26, 0x0A	; 10
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
  8a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hastaTecla>:
	{'1', '2', '3', 'C'},
	{'E', '0', 'F', '+'}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
  92:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
  94:	43 2f       	mov	r20, r19
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	03 2e       	mov	r0, r19
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <hastaTecla+0x12>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <hastaTecla+0xe>
  a8:	80 95       	com	r24
  aa:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  ac:	00 00       	nop
		asm("nop");
  ae:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	36 c0       	rjmp	.+108    	; 0x120 <hastaTecla+0x8e>
			if(isClear(PINX, j)){
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	62 2f       	mov	r22, r18
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 2e       	mov	r0, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <hastaTecla+0x32>
  c0:	95 95       	asr	r25
  c2:	87 95       	ror	r24
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <hastaTecla+0x2e>
  c8:	80 fd       	sbrc	r24, 0
  ca:	29 c0       	rjmp	.+82     	; 0x11e <hastaTecla+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <hastaTecla+0x3e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <hastaTecla+0x44>
  d6:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINX, j));
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	06 2e       	mov	r0, r22
  de:	02 c0       	rjmp	.+4      	; 0xe4 <hastaTecla+0x52>
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <hastaTecla+0x4e>
  e8:	80 ff       	sbrs	r24, 0
  ea:	f6 cf       	rjmp	.-20     	; 0xd8 <hastaTecla+0x46>
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <hastaTecla+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <hastaTecla+0x64>
  f6:	00 00       	nop
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	86 1b       	sub	r24, r22
  fe:	97 0b       	sbc	r25, r23
 100:	23 e0       	ldi	r18, 0x03	; 3
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	24 1b       	sub	r18, r20
 106:	35 0b       	sbc	r19, r21
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	80 5a       	subi	r24, 0xA0	; 160
 112:	9f 4f       	sbci	r25, 0xFF	; 255
 114:	fc 01       	movw	r30, r24
 116:	e2 0f       	add	r30, r18
 118:	f3 1f       	adc	r31, r19
 11a:	80 81       	ld	r24, Z
 11c:	08 95       	ret
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	28 30       	cpi	r18, 0x08	; 8
 122:	40 f2       	brcs	.-112    	; 0xb4 <hastaTecla+0x22>
	{'1', '2', '3', 'C'},
	{'E', '0', 'F', '+'}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 124:	3f 5f       	subi	r19, 0xFF	; 255
 126:	33 70       	andi	r19, 0x03	; 3
				while(isClear(PINX, j));
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 128:	b5 cf       	rjmp	.-150    	; 0x94 <hastaTecla+0x2>

0000012a <KB_init>:
}
void KB_init(){
	DDRX = 0x0F;
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	8a bb       	out	0x1a, r24	; 26
	PORTX = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	8b bb       	out	0x1b, r24	; 27
 132:	08 95       	ret

00000134 <saca_uno>:
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}


void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 134:	fc 01       	movw	r30, r24
 136:	40 81       	ld	r20, Z
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <saca_uno+0xe>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <saca_uno+0xa>
 146:	24 2b       	or	r18, r20
 148:	20 83       	st	Z, r18
 14a:	08 95       	ret

0000014c <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 14c:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 14e:	90 81       	ld	r25, Z
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <saca_cero+0xe>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <saca_cero+0xa>
 15e:	20 95       	com	r18
 160:	29 23       	and	r18, r25
 162:	20 83       	st	Z, r18
 164:	08 95       	ret

00000166 <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribir? un dato
 166:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_cero(&PORTLCD,RW);
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	85 e3       	ldi	r24, 0x35	; 53
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,E);
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	85 e3       	ldi	r24, 0x35	; 53
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 186:	83 ec       	ldi	r24, 0xC3	; 195
 188:	99 e0       	ldi	r25, 0x09	; 9
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_wr_inst_ini+0x24>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_wr_inst_ini+0x2a>
 190:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	85 e3       	ldi	r24, 0x35	; 53
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
 19c:	08 95       	ret

0000019e <LCD_wait_flag>:
}


void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo dem?s salida
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	84 bb       	out	0x14, r24	; 20
	saca_cero(&PORTLCD,RS);// Instrucci?n
 1a4:	64 e0       	ldi	r22, 0x04	; 4
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 1b8:	66 e0       	ldi	r22, 0x06	; 6
 1ba:	85 e3       	ldi	r24, 0x35	; 53
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 1c2:	83 ec       	ldi	r24, 0xC3	; 195
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_wait_flag+0x28>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_wait_flag+0x2e>
 1cc:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	85 e3       	ldi	r24, 0x35	; 53
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
		if(isSet(PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 1d8:	9b 99       	sbic	0x13, 3	; 19
 1da:	15 c0       	rjmp	.+42     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_wait_flag+0x40>
 1e2:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 1e4:	66 e0       	ldi	r22, 0x06	; 6
 1e6:	85 e3       	ldi	r24, 0x35	; 53
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	83 ec       	ldi	r24, 0xC3	; 195
 1f0:	99 e0       	ldi	r25, 0x09	; 9
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_wait_flag+0x54>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_wait_flag+0x5a>
 1f8:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 1fa:	66 e0       	ldi	r22, 0x06	; 6
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	}
 204:	d9 cf       	rjmp	.-78     	; 0x1b8 <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	85 e3       	ldi	r24, 0x35	; 53
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 210:	83 ec       	ldi	r24, 0xC3	; 195
 212:	99 e0       	ldi	r25, 0x09	; 9
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 21c:	66 e0       	ldi	r22, 0x06	; 6
 21e:	85 e3       	ldi	r24, 0x35	; 53
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_cero(&PORTLCD,RW);
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	85 e3       	ldi	r24, 0x35	; 53
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 23a:	84 b3       	in	r24, 0x14	; 20
 23c:	8f 67       	ori	r24, 0x7F	; 127
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret

00000242 <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribir? un dato
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	85 bb       	out	0x15, r24	; 21
	saca_uno(&PORTLCD,RS);
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	85 e3       	ldi	r24, 0x35	; 53
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
	saca_cero(&PORTLCD,RW);
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	85 e3       	ldi	r24, 0x35	; 53
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,E);
 260:	66 e0       	ldi	r22, 0x06	; 6
 262:	85 e3       	ldi	r24, 0x35	; 53
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_wr_char+0x2c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_wr_char+0x32>
 274:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	85 e3       	ldi	r24, 0x35	; 53
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribir? un dato
 280:	cf 70       	andi	r28, 0x0F	; 15
 282:	c5 bb       	out	0x15, r28	; 21
	saca_uno(&PORTLCD,RS);
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	85 e3       	ldi	r24, 0x35	; 53
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
	saca_cero(&PORTLCD,RW);
 28e:	65 e0       	ldi	r22, 0x05	; 5
 290:	85 e3       	ldi	r24, 0x35	; 53
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,E);
 298:	66 e0       	ldi	r22, 0x06	; 6
 29a:	85 e3       	ldi	r24, 0x35	; 53
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 2a2:	83 ec       	ldi	r24, 0xC3	; 195
 2a4:	99 e0       	ldi	r25, 0x09	; 9
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_wr_char+0x64>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_wr_char+0x6a>
 2ac:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	85 e3       	ldi	r24, 0x35	; 53
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_cero(&PORTLCD,RS);
 2b8:	64 e0       	ldi	r22, 0x04	; 4
 2ba:	85 e3       	ldi	r24, 0x35	; 53
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	LCD_wait_flag();
 2c2:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_wait_flag>
	
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_wr_string>:
			LCD_wr_char('0' + points);
		}
	}
}

void LCD_wr_string(volatile uint8_t *s){
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c = *s++)){
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <LCD_wr_string+0xe>
		LCD_wr_char(c);
 2d2:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
	}
}

void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c = *s++)){
 2d6:	fe 01       	movw	r30, r28
 2d8:	ef 01       	movw	r28, r30
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	80 81       	ld	r24, Z
 2de:	81 11       	cpse	r24, r1
 2e0:	f8 cf       	rjmp	.-16     	; 0x2d2 <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa de la instrucci?n
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribir? un dato
 2ec:	82 95       	swap	r24
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	85 e3       	ldi	r24, 0x35	; 53
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_cero(&PORTLCD,RW);
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,E);
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	85 e3       	ldi	r24, 0x35	; 53
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 310:	83 ec       	ldi	r24, 0xC3	; 195
 312:	99 e0       	ldi	r25, 0x09	; 9
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_wr_instruction+0x2c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_wr_instruction+0x32>
 31a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	85 e3       	ldi	r24, 0x35	; 53
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	//saco la parte menos significativa de la instrucci?n
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribir? un dato
 326:	cf 70       	andi	r28, 0x0F	; 15
 328:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	85 e3       	ldi	r24, 0x35	; 53
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_cero(&PORTLCD,RW);
 334:	65 e0       	ldi	r22, 0x05	; 5
 336:	85 e3       	ldi	r24, 0x35	; 53
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	saca_uno(&PORTLCD,E);
 33e:	66 e0       	ldi	r22, 0x06	; 6
 340:	85 e3       	ldi	r24, 0x35	; 53
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 9a 00 	call	0x134	; 0x134 <saca_uno>
 348:	83 ec       	ldi	r24, 0xC3	; 195
 34a:	99 e0       	ldi	r25, 0x09	; 9
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_wr_instruction+0x64>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_wr_instruction+0x6a>
 352:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 a6 00 	call	0x14c	; 0x14c <saca_cero>
	LCD_wait_flag();
 35e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_wait_flag>
}
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <LCD_init>:
}



void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 366:	8f e7       	ldi	r24, 0x7F	; 127
 368:	84 bb       	out	0x14, r24	; 20
 36a:	85 ea       	ldi	r24, 0xA5	; 165
 36c:	9e e0       	ldi	r25, 0x0E	; 14
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_init+0x8>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_init+0xe>
 374:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_wr_inst_ini>
 37c:	81 ee       	ldi	r24, 0xE1	; 225
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_init+0x1a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_init+0x20>
 386:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	91 e2       	ldi	r25, 0x21	; 33
 390:	9a 95       	dec	r25
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_init+0x2a>
 394:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_wr_inst_ini>
 39c:	81 e2       	ldi	r24, 0x21	; 33
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_init+0x38>
 3a2:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_wr_inst_ini>
 3aa:	91 e2       	ldi	r25, 0x21	; 33
 3ac:	9a 95       	dec	r25
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_init+0x46>
 3b0:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 3ca:	8c e0       	ldi	r24, 0x0C	; 12
 3cc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
 3d0:	08 95       	ret

000003d2 <main>:

uint8_t squares[2][10] = {0};

int main(void)
{
	LCD_init();
 3d2:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_init>
	KB_init();	
 3d6:	0e 94 95 00 	call	0x12a	; 0x12a <KB_init>
	uint8_t t, points = 0, status = 0, try, wait = 0;
	for(;;){
		LCD_wr_string("Cuantas coordena");
 3da:	80 e7       	ldi	r24, 0x70	; 112
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		do t = hastaTecla();			
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <hastaTecla>
 3e6:	c8 2f       	mov	r28, r24
		while(t < '0' && t > '9');
		try = t - '0';
 3e8:	d0 ed       	ldi	r29, 0xD0	; 208
 3ea:	d8 0f       	add	r29, r24
		LCD_wr_instruction(LCD_Cmd_Clear);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_instruction(LCD_Cmd_Home);
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("Escondere ");
 3f8:	81 e8       	ldi	r24, 0x81	; 129
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		LCD_wr_char(t);
 400:	8c 2f       	mov	r24, r28
 402:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
		LCD_wr_instruction(0b11000000);
 406:	80 ec       	ldi	r24, 0xC0	; 192
 408:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("coordenada");
 40c:	8e e9       	ldi	r24, 0x9E	; 158
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		if(try > 1) LCD_wr_char('s');
 414:	d2 30       	cpi	r29, 0x02	; 2
 416:	18 f0       	brcs	.+6      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 418:	83 e7       	ldi	r24, 0x73	; 115
 41a:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
		_delay_ms(wait);
		LCD_wr_instruction(LCD_Cmd_Clear);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_instruction(LCD_Cmd_Home);
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("Tu debes buscar ");
 42a:	8c e8       	ldi	r24, 0x8C	; 140
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		LCD_wr_instruction(0b11000000);
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_char(t);
 438:	8c 2f       	mov	r24, r28
 43a:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
		LCD_wr_string(" coordenada");
 43e:	8d e9       	ldi	r24, 0x9D	; 157
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		if(try > 1) LCD_wr_char('s');
 446:	d2 30       	cpi	r29, 0x02	; 2
 448:	18 f0       	brcs	.+6      	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 44a:	83 e7       	ldi	r24, 0x73	; 115
 44c:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
		LCD_wr_char('.');
 450:	8e e2       	ldi	r24, 0x2E	; 46
 452:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
		_delay_ms(wait);
		LCD_wr_instruction(LCD_Cmd_Clear);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_instruction(LCD_Cmd_Home);
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("2 filas (0, 1)");
 462:	89 ea       	ldi	r24, 0xA9	; 169
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		LCD_wr_instruction(0b11000000);
 46a:	80 ec       	ldi	r24, 0xC0	; 192
 46c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("10 cols (0, 9)");
 470:	88 eb       	ldi	r24, 0xB8	; 184
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		_delay_ms(wait);
		LCD_wr_instruction(LCD_Cmd_Clear);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_instruction(LCD_Cmd_Home);
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("Presiona +");
 484:	87 ec       	ldi	r24, 0xC7	; 199
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		LCD_wr_instruction(0b11000000);
 48c:	80 ec       	ldi	r24, 0xC0	; 192
 48e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("para continuar..");
 492:	82 ed       	ldi	r24, 0xD2	; 210
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		do t = hastaTecla();
 49a:	0e 94 49 00 	call	0x92	; 0x92 <hastaTecla>
 49e:	c8 2f       	mov	r28, r24
		while(t != '+');
 4a0:	8b 32       	cpi	r24, 0x2B	; 43
 4a2:	d9 f7       	brne	.-10     	; 0x49a <__stack+0x3b>
		LCD_wr_instruction(LCD_Cmd_Clear);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_instruction(LCD_Cmd_Home);
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("Trata de");
 4b0:	83 ee       	ldi	r24, 0xE3	; 227
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		LCD_wr_instruction(0b11000000);
 4b8:	80 ec       	ldi	r24, 0xC0	; 192
 4ba:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
		LCD_wr_string("memorizar...");
 4be:	8c ee       	ldi	r24, 0xEC	; 236
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
		_delay_ms(wait);
		for(uint8_t i = 0; i < try; i++){
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <__stack+0x6d>
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	8d 17       	cp	r24, r29
 4ce:	e8 f3       	brcs	.-6      	; 0x4ca <__stack+0x6b>

		}
		if(t == 'E'){
 4d0:	c5 34       	cpi	r28, 0x45	; 69
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	82 cf       	rjmp	.-252    	; 0x3da <main+0x8>
			LCD_wr_instruction(LCD_Cmd_Home);
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_wr_instruction>
			LCD_wr_string("Tu puntaje es: ");
 4dc:	89 ef       	ldi	r24, 0xF9	; 249
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_wr_string>
			LCD_wr_char('0' + points);
 4e4:	80 e3       	ldi	r24, 0x30	; 48
 4e6:	0e 94 21 01 	call	0x242	; 0x242 <LCD_wr_char>
 4ea:	77 cf       	rjmp	.-274    	; 0x3da <main+0x8>

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
