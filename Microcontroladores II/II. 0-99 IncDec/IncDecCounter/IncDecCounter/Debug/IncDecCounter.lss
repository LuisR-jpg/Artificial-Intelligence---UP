
IncDecCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000764  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062b  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <print>:
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>

void print(int8_t n){
	int8_t u = ((n % 10) << 4), d = n / 10;
  6c:	27 e6       	ldi	r18, 0x67	; 103
  6e:	82 02       	muls	r24, r18
  70:	21 2d       	mov	r18, r1
  72:	11 24       	eor	r1, r1
  74:	25 95       	asr	r18
  76:	25 95       	asr	r18
  78:	87 fd       	sbrc	r24, 7
  7a:	23 95       	inc	r18
  7c:	32 2f       	mov	r19, r18
  7e:	33 0f       	add	r19, r19
  80:	93 2f       	mov	r25, r19
  82:	99 0f       	add	r25, r25
  84:	99 0f       	add	r25, r25
  86:	93 0f       	add	r25, r19
  88:	89 1b       	sub	r24, r25
  8a:	98 2f       	mov	r25, r24
  8c:	30 e1       	ldi	r19, 0x10	; 16
  8e:	93 02       	muls	r25, r19
  90:	c0 01       	movw	r24, r0
  92:	11 24       	eor	r1, r1
	PORTC = u | d;
  94:	82 2b       	or	r24, r18
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <main>:
}

int main(void)
{
	DDRA = 0x7E;
  9a:	8e e7       	ldi	r24, 0x7E	; 126
  9c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
  a2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  a4:	15 ba       	out	0x15, r1	; 21
	int8_t cnt = 0;
  a6:	c0 e0       	ldi	r28, 0x00	; 0
    for(;;){
		if(isClear(PINA, 0)){
  a8:	c8 99       	sbic	0x19, 0	; 25
  aa:	14 c0       	rjmp	.+40     	; 0xd4 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x16>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x1c>
  b6:	00 00       	nop
			_delay_ms(50);
			while(isClear(PINA, 0));
  b8:	c8 9b       	sbis	0x19, 0	; 25
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x1e>
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x26>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x2c>
  c6:	00 00       	nop
			_delay_ms(50);
			if(cnt < 99) cnt++;
  c8:	c3 36       	cpi	r28, 0x63	; 99
  ca:	0c f4       	brge	.+2      	; 0xce <main+0x34>
  cc:	cf 5f       	subi	r28, 0xFF	; 255
			print(cnt);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <print>
		}
		if(isClear(PINA, 7)){
  d4:	cf 99       	sbic	0x19, 7	; 25
  d6:	e8 cf       	rjmp	.-48     	; 0xa8 <main+0xe>
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x42>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x48>
  e2:	00 00       	nop
			_delay_ms(50);
			while(isClear(PINA, 7));
  e4:	cf 9b       	sbis	0x19, 7	; 25
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x4a>
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x52>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x58>
  f2:	00 00       	nop
			_delay_ms(50);
			if(cnt) cnt--;
  f4:	c1 11       	cpse	r28, r1
  f6:	c1 50       	subi	r28, 0x01	; 1
			print(cnt);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <print>
  fe:	d4 cf       	rjmp	.-88     	; 0xa8 <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
