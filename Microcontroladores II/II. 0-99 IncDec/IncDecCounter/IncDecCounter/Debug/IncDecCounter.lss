
IncDecCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fc  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f1  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	//return u | d;
//}

int main(void)
{
	DDRA = 0x7E;
  6c:	8e e7       	ldi	r24, 0x7E	; 126
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
  76:	15 ba       	out	0x15, r1	; 21
	int8_t cnt = 0;
  78:	90 e0       	ldi	r25, 0x00	; 0
    for(;;){
		if(isClear(PINA, 0)){
  7a:	c8 99       	sbic	0x19, 0	; 25
  7c:	27 c0       	rjmp	.+78     	; 0xcc <main+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e3 ed       	ldi	r30, 0xD3	; 211
  80:	f0 e3       	ldi	r31, 0x30	; 48
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
			_delay_ms(50);
			while(isClear(PINA, 0));
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x1e>
  8e:	e3 ed       	ldi	r30, 0xD3	; 211
  90:	f0 e3       	ldi	r31, 0x30	; 48
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
			_delay_ms(50);
			if(cnt < 99) cnt++;
  9a:	93 36       	cpi	r25, 0x63	; 99
  9c:	0c f4       	brge	.+2      	; 0xa0 <main+0x34>
  9e:	9f 5f       	subi	r25, 0xFF	; 255
			PORTC = print(cnt);
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	98 02       	muls	r25, r24
  a4:	81 2d       	mov	r24, r1
  a6:	11 24       	eor	r1, r1
  a8:	85 95       	asr	r24
  aa:	85 95       	asr	r24
  ac:	97 fd       	sbrc	r25, 7
  ae:	83 95       	inc	r24
  b0:	38 2f       	mov	r19, r24
  b2:	33 0f       	add	r19, r19
  b4:	23 2f       	mov	r18, r19
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	23 0f       	add	r18, r19
  bc:	f9 2f       	mov	r31, r25
  be:	f2 1b       	sub	r31, r18
  c0:	40 e1       	ldi	r20, 0x10	; 16
  c2:	f4 02       	muls	r31, r20
  c4:	90 01       	movw	r18, r0
  c6:	11 24       	eor	r1, r1
  c8:	82 2b       	or	r24, r18
  ca:	85 bb       	out	0x15, r24	; 21
		}
		if(isClear(PINA, 7)){
  cc:	cf 99       	sbic	0x19, 7	; 25
  ce:	d5 cf       	rjmp	.-86     	; 0x7a <main+0xe>
  d0:	e3 ed       	ldi	r30, 0xD3	; 211
  d2:	f0 e3       	ldi	r31, 0x30	; 48
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x68>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
			_delay_ms(50);
			while(isClear(PINA, 7));
  dc:	cf 9b       	sbis	0x19, 7	; 25
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x70>
  e0:	e3 ed       	ldi	r30, 0xD3	; 211
  e2:	f0 e3       	ldi	r31, 0x30	; 48
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x78>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x7e>
  ea:	00 00       	nop
			_delay_ms(50);
			if(cnt) cnt--;
  ec:	91 11       	cpse	r25, r1
  ee:	91 50       	subi	r25, 0x01	; 1
			PORTC = print(cnt);
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	98 02       	muls	r25, r24
  f4:	81 2d       	mov	r24, r1
  f6:	11 24       	eor	r1, r1
  f8:	85 95       	asr	r24
  fa:	85 95       	asr	r24
  fc:	97 fd       	sbrc	r25, 7
  fe:	83 95       	inc	r24
 100:	38 2f       	mov	r19, r24
 102:	33 0f       	add	r19, r19
 104:	23 2f       	mov	r18, r19
 106:	22 0f       	add	r18, r18
 108:	22 0f       	add	r18, r18
 10a:	23 0f       	add	r18, r19
 10c:	f9 2f       	mov	r31, r25
 10e:	f2 1b       	sub	r31, r18
 110:	40 e1       	ldi	r20, 0x10	; 16
 112:	f4 02       	muls	r31, r20
 114:	90 01       	movw	r18, r0
 116:	11 24       	eor	r1, r1
 118:	82 2b       	or	r24, r18
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	ae cf       	rjmp	.-164    	; 0x7a <main+0xe>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
