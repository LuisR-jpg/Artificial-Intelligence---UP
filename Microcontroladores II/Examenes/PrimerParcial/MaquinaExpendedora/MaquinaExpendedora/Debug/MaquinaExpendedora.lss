
MaquinaExpendedora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000c4a  00000cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000bc  008000bc  00000d3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001463  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000785  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000704  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fa  00000000  00000000  0000373f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3d       	cpi	r26, 0xDD	; 221
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 02 	call	0x500	; 0x500 <main>
  8a:	0c 94 23 06 	jmp	0xc46	; 0xc46 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <saca_uno>:
	saca_cero(&PORTLCD,RS);
	saca_cero(&PORTLCD,RW);
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
  92:	fc 01       	movw	r30, r24
  94:	40 81       	ld	r20, Z
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <saca_uno+0xe>
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <saca_uno+0xa>
  a4:	24 2b       	or	r18, r20
  a6:	20 83       	st	Z, r18
  a8:	08 95       	ret

000000aa <saca_cero>:
}
void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
  aa:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
  ac:	90 81       	ld	r25, Z
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <saca_cero+0xe>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <saca_cero+0xa>
  bc:	20 95       	com	r18
  be:	29 23       	and	r18, r25
  c0:	20 83       	st	Z, r18
  c2:	08 95       	ret

000000c4 <LCD_wr_inst_ini>:
	saca_cero(&PORTLCD,RS);
	LCD_wait_flag();
	
}
void LCD_wr_inst_ini(uint8_t instruccion){
	PORTLCD=instruccion; //Saco el dato y le digo que escribir? un dato
  c4:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD,RS);
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	8b e3       	ldi	r24, 0x3B	; 59
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
  d2:	66 e0       	ldi	r22, 0x06	; 6
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
  de:	67 e0       	ldi	r22, 0x07	; 7
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	8b e3       	ldi	r24, 0x3B	; 59
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	83 ec       	ldi	r24, 0xC3	; 195
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_wr_inst_ini+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_wr_inst_ini+0x30>
  f4:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
  f6:	67 e0       	ldi	r22, 0x07	; 7
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	8b e3       	ldi	r24, 0x3B	; 59
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
 102:	08 95       	ret

00000104 <LCD_wait_flag>:
	saca_cero(&PORTLCD,E);
	LCD_wait_flag();
}
void LCD_wait_flag(void){
	//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo dem?s salida
 104:	8a b3       	in	r24, 0x1a	; 26
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	8a bb       	out	0x1a, r24	; 26
	saca_cero(&PORTLCD,RS);// Instrucci?n
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	8b e3       	ldi	r24, 0x3B	; 59
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	8b e3       	ldi	r24, 0x3B	; 59
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
 122:	67 e0       	ldi	r22, 0x07	; 7
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8b e3       	ldi	r24, 0x3B	; 59
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 12e:	83 ec       	ldi	r24, 0xC3	; 195
 130:	99 e0       	ldi	r25, 0x09	; 9
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_wait_flag+0x2e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_wait_flag+0x34>
 138:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 13a:	67 e0       	ldi	r22, 0x07	; 7
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	8b e3       	ldi	r24, 0x3B	; 59
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
		if(isSet(PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 146:	cb 99       	sbic	0x19, 3	; 25
 148:	17 c0       	rjmp	.+46     	; 0x178 <LCD_wait_flag+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_wait_flag+0x48>
 150:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 152:	67 e0       	ldi	r22, 0x07	; 7
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	8b e3       	ldi	r24, 0x3B	; 59
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_wait_flag+0x5e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_wait_flag+0x64>
 168:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	8b e3       	ldi	r24, 0x3B	; 59
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	}
 176:	d5 cf       	rjmp	.-86     	; 0x122 <LCD_wait_flag+0x1e>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 178:	67 e0       	ldi	r22, 0x07	; 7
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	8b e3       	ldi	r24, 0x3B	; 59
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 184:	83 ec       	ldi	r24, 0xC3	; 195
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_wait_flag+0x84>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_wait_flag+0x8a>
 18e:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	8b e3       	ldi	r24, 0x3B	; 59
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	8b e3       	ldi	r24, 0x3B	; 59
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	8b e3       	ldi	r24, 0x3B	; 59
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 1b4:	8a b3       	in	r24, 0x1a	; 26
 1b6:	8f 6d       	ori	r24, 0xDF	; 223
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret

000001bc <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
	LCD_wr_instruction(LCD_Cmd_OncCcB); //Enciende el display
}
void LCD_wr_char(uint8_t data){
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribir? un dato
 1c0:	82 95       	swap	r24
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	8b bb       	out	0x1b, r24	; 27
	saca_uno(&PORTLCD,RS);
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	8b e3       	ldi	r24, 0x3B	; 59
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1d2:	66 e0       	ldi	r22, 0x06	; 6
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	8b e3       	ldi	r24, 0x3B	; 59
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8b e3       	ldi	r24, 0x3B	; 59
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 1ea:	83 ec       	ldi	r24, 0xC3	; 195
 1ec:	99 e0       	ldi	r25, 0x09	; 9
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_wr_char+0x32>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_wr_char+0x38>
 1f4:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1f6:	67 e0       	ldi	r22, 0x07	; 7
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	8b e3       	ldi	r24, 0x3B	; 59
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribir? un dato
 202:	cf 70       	andi	r28, 0x0F	; 15
 204:	cb bb       	out	0x1b, r28	; 27
	saca_uno(&PORTLCD,RS);
 206:	64 e0       	ldi	r22, 0x04	; 4
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	8b e3       	ldi	r24, 0x3B	; 59
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&PORTLCD,RW);
 212:	66 e0       	ldi	r22, 0x06	; 6
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	8b e3       	ldi	r24, 0x3B	; 59
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 21e:	67 e0       	ldi	r22, 0x07	; 7
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	8b e3       	ldi	r24, 0x3B	; 59
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 22a:	83 ec       	ldi	r24, 0xC3	; 195
 22c:	99 e0       	ldi	r25, 0x09	; 9
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 234:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 236:	67 e0       	ldi	r22, 0x07	; 7
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8b e3       	ldi	r24, 0x3B	; 59
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RS);
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	8b e3       	ldi	r24, 0x3B	; 59
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 24e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_wait_flag>
	
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCD_wr_string>:
	LCD_wr_instruction(LCD_Cmd_Home);
	LCD_wr_string(a);
	LCD_wr_instruction(0b11000000);
	LCD_wr_string(b);
}
void LCD_wr_string(volatile uint8_t *s){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	fc 01       	movw	r30, r24
	uint8_t c;
	while((c=*s++)){
 25c:	04 c0       	rjmp	.+8      	; 0x266 <LCD_wr_string+0x10>
		LCD_wr_char(c);
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_wr_char>
	LCD_wr_instruction(0b11000000);
	LCD_wr_string(b);
}
void LCD_wr_string(volatile uint8_t *s){
	uint8_t c;
	while((c=*s++)){
 264:	fe 01       	movw	r30, r28
 266:	ef 01       	movw	r28, r30
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	80 81       	ld	r24, Z
 26c:	81 11       	cpse	r24, r1
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <LCD_wr_string+0x8>
		LCD_wr_char(c);
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <LCD_wr_instruction>:
	saca_cero(&PORTLCD,RW);
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}
void LCD_wr_instruction(uint8_t instruccion){
 276:	cf 93       	push	r28
 278:	c8 2f       	mov	r28, r24
	//saco la parte m?s significativa de la instrucci?n
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribir? un dato
 27a:	82 95       	swap	r24
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	8b bb       	out	0x1b, r24	; 27
	saca_cero(&PORTLCD,RS);
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	8b e3       	ldi	r24, 0x3B	; 59
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	8b e3       	ldi	r24, 0x3B	; 59
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	8b e3       	ldi	r24, 0x3B	; 59
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 2a4:	83 ec       	ldi	r24, 0xC3	; 195
 2a6:	99 e0       	ldi	r25, 0x09	; 9
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_wr_instruction+0x32>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_wr_instruction+0x38>
 2ae:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2b0:	67 e0       	ldi	r22, 0x07	; 7
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	8b e3       	ldi	r24, 0x3B	; 59
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	//saco la parte menos significativa de la instrucci?n
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribir? un dato
 2bc:	cf 70       	andi	r28, 0x0F	; 15
 2be:	cb bb       	out	0x1b, r28	; 27
	saca_cero(&PORTLCD,RS);
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8b e3       	ldi	r24, 0x3B	; 59
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_cero(&PORTLCD,RW);
 2cc:	66 e0       	ldi	r22, 0x06	; 6
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	8b e3       	ldi	r24, 0x3B	; 59
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&PORTLCD,E);
 2d8:	67 e0       	ldi	r22, 0x07	; 7
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	8b e3       	ldi	r24, 0x3B	; 59
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 2e4:	83 ec       	ldi	r24, 0xC3	; 195
 2e6:	99 e0       	ldi	r25, 0x09	; 9
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_wr_instruction+0x72>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_wr_instruction+0x78>
 2ee:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	8b e3       	ldi	r24, 0x3B	; 59
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	LCD_wait_flag();
 2fc:	0e 94 82 00 	call	0x104	; 0x104 <LCD_wait_flag>
}
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <LCD_wr_lines>:
//#define LCD_Cmd_Function 0b001 DL  N  F  00
#define LCD_Cmd_Func2Lin   0b00101000 //para dos lineas
#define LCD_Cmd_Func1LinCh 0b00100000 //para una linea con letra chica
#define LCD_Cmd_Func1LinG  0b00100100 //para una linea con letra grande
//#define LCD_Cmd_DDRAM    0b1xxxxxxx
void LCD_wr_lines(uint8_t *a, uint8_t *b){
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	8c 01       	movw	r16, r24
 30e:	eb 01       	movw	r28, r22
	LCD_wr_instruction(LCD_Cmd_Clear);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Home);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_string(a);
 320:	c8 01       	movw	r24, r16
 322:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_string>
	LCD_wr_instruction(0b11000000);
 326:	80 ec       	ldi	r24, 0xC0	; 192
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_string(b);
 32e:	ce 01       	movw	r24, r28
 330:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_string>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <LCD_init>:
	while((c=*s++)){
		LCD_wr_char(c);
	}
}
void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 33e:	8f ed       	ldi	r24, 0xDF	; 223
 340:	8a bb       	out	0x1a, r24	; 26
 342:	85 ea       	ldi	r24, 0xA5	; 165
 344:	9e e0       	ldi	r25, 0x0E	; 14
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_init+0x8>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_init+0xe>
 34c:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 356:	81 ee       	ldi	r24, 0xE1	; 225
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_init+0x1c>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_init+0x22>
 360:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	91 e2       	ldi	r25, 0x21	; 33
 36c:	9a 95       	dec	r25
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_init+0x2e>
 370:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 37a:	81 e2       	ldi	r24, 0x21	; 33
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_init+0x3e>
 380:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_wr_inst_ini>
 38a:	91 e2       	ldi	r25, 0x21	; 33
 38c:	9a 95       	dec	r25
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_init+0x4e>
 390:	00 00       	nop
	_delay_us(100);
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, n?mero de l?neas y tipo de letra
 392:	88 e2       	ldi	r24, 0x28	; 40
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OncCcB); //Enciende el display
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
 3ba:	08 95       	ret

000003bc <hastaTecla>:
	{0x0, 0x0, 0x0, 'B'},
	{'1', '2', 0x0, 0x0},
	{0x0, 0x0, 0x0, 0x0}
};
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 3bc:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
 3be:	43 2f       	mov	r20, r19
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	03 2e       	mov	r0, r19
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <hastaTecla+0x12>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <hastaTecla+0xe>
 3d2:	80 95       	com	r24
 3d4:	85 bb       	out	0x15, r24	; 21
		asm("nop");
 3d6:	00 00       	nop
		asm("nop");
 3d8:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
 3da:	24 e0       	ldi	r18, 0x04	; 4
 3dc:	32 c0       	rjmp	.+100    	; 0x442 <__DATA_REGION_LENGTH__+0x42>
			if(isClear(PINX, j)){
 3de:	83 b3       	in	r24, 0x13	; 19
 3e0:	62 2f       	mov	r22, r18
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 2e       	mov	r0, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <hastaTecla+0x32>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <hastaTecla+0x2e>
 3f2:	80 fd       	sbrc	r24, 0
 3f4:	25 c0       	rjmp	.+74     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	83 ed       	ldi	r24, 0xD3	; 211
 3f8:	90 e3       	ldi	r25, 0x30	; 48
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <hastaTecla+0x3e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__DATA_REGION_LENGTH__>
 400:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINX, j));
 402:	83 b3       	in	r24, 0x13	; 19
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	06 2e       	mov	r0, r22
 408:	02 c0       	rjmp	.+4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 412:	80 ff       	sbrs	r24, 0
 414:	f6 cf       	rjmp	.-20     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 416:	83 ed       	ldi	r24, 0xD3	; 211
 418:	90 e3       	ldi	r25, 0x30	; 48
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 420:	00 00       	nop
				_delay_ms(50);
				return keyboard[i][7 - j];
 422:	87 e0       	ldi	r24, 0x07	; 7
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	86 1b       	sub	r24, r22
 428:	97 0b       	sbc	r25, r23
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	40 5a       	subi	r20, 0xA0	; 160
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	fa 01       	movw	r30, r20
 438:	e8 0f       	add	r30, r24
 43a:	f9 1f       	adc	r31, r25
 43c:	80 81       	ld	r24, Z
 43e:	08 95       	ret
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	28 30       	cpi	r18, 0x08	; 8
 444:	60 f2       	brcs	.-104    	; 0x3de <hastaTecla+0x22>
	{0x0, 0x0, 0x0, 'B'},
	{'1', '2', 0x0, 0x0},
	{0x0, 0x0, 0x0, 0x0}
};
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 446:	3f 5f       	subi	r19, 0xFF	; 255
 448:	33 70       	andi	r19, 0x03	; 3
				while(isClear(PINX, j));
				_delay_ms(50);
				return keyboard[i][7 - j];
			}
		}
	}
 44a:	b9 cf       	rjmp	.-142    	; 0x3be <hastaTecla+0x2>

0000044c <KB_init>:
}
void KB_init(){
	DDRX = 0x0F;
 44c:	8f e0       	ldi	r24, 0x0F	; 15
 44e:	84 bb       	out	0x14, r24	; 20
	PORTX = 0xFF;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	85 bb       	out	0x15, r24	; 21
 454:	08 95       	ret

00000456 <__vector_18>:
}

ISR(INT2_vect){
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	cf 93       	push	r28
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	uint8_t coin = PINB << 1, add = 0;
 47a:	86 b3       	in	r24, 0x16	; 22
 47c:	88 0f       	add	r24, r24
	coin >>= 4;
 47e:	82 95       	swap	r24
 480:	8f 70       	andi	r24, 0x0F	; 15
	if(coin < 5) add = coin;
 482:	85 30       	cpi	r24, 0x05	; 5
 484:	10 f0       	brcs	.+4      	; 0x48a <__stack+0x2b>
	DDRX = 0x0F;
	PORTX = 0xFF;
}

ISR(INT2_vect){
	uint8_t coin = PINB << 1, add = 0;
 486:	c0 e0       	ldi	r28, 0x00	; 0
 488:	01 c0       	rjmp	.+2      	; 0x48c <__stack+0x2d>
	coin >>= 4;
	if(coin < 5) add = coin;
 48a:	c8 2f       	mov	r28, r24
	if(coin == 3) add += 2;
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	09 f4       	brne	.+2      	; 0x492 <__stack+0x33>
 490:	ce 5f       	subi	r28, 0xFE	; 254
	if(coin == 4) add += 6;
 492:	84 30       	cpi	r24, 0x04	; 4
 494:	09 f4       	brne	.+2      	; 0x498 <__stack+0x39>
 496:	ca 5f       	subi	r28, 0xFA	; 250
	sprintf(dos, "Tienes $%02d.00", m += add);
 498:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 49c:	8c 0f       	add	r24, r28
 49e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
 4a2:	1f 92       	push	r1
 4a4:	8f 93       	push	r24
 4a6:	80 e7       	ldi	r24, 0x70	; 112
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	8d eb       	ldi	r24, 0xBD	; 189
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	9f 93       	push	r25
 4b4:	8f 93       	push	r24
 4b6:	0e 94 39 03 	call	0x672	; 0x672 <sprintf>
	while(isClear(PINB, 2));
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	b2 9b       	sbis	0x16, 2	; 22
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <__stack+0x67>
	if(add) LCD_wr_instruction(0xC0), LCD_wr_string(dos);
 4ca:	cc 23       	and	r28, r28
 4cc:	39 f0       	breq	.+14     	; 0x4dc <__stack+0x7d>
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
 4d4:	8d eb       	ldi	r24, 0xBD	; 189
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_wr_string>
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	cf 91       	pop	r28
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <main>:

int main(void)
{
	LCD_init();
 500:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_init>
	KB_init();
 504:	0e 94 26 02 	call	0x44c	; 0x44c <KB_init>
	DDRB = 0b10000011;
 508:	83 e8       	ldi	r24, 0x83	; 131
 50a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x7F;
 50c:	8f e7       	ldi	r24, 0x7F	; 127
 50e:	88 bb       	out	0x18, r24	; 24
	saca_uno(&GIFR, 5);		//Flag
 510:	65 e0       	ldi	r22, 0x05	; 5
 512:	8a e5       	ldi	r24, 0x5A	; 90
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	saca_cero(&MCUCSR, 6);	//Flanco
 51a:	66 e0       	ldi	r22, 0x06	; 6
 51c:	84 e5       	ldi	r24, 0x54	; 84
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
	saca_uno(&GICR, 5);		//Enable 
 524:	65 e0       	ldi	r22, 0x05	; 5
 526:	8b e5       	ldi	r24, 0x5B	; 91
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
	uint8_t t, c, wait = 100;
	for(;;){
		m = 0;
 52e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
		LCD_wr_instruction(LCD_Cmd_OncCcB);
 532:	8f e0       	ldi	r24, 0x0F	; 15
 534:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
		LCD_wr_lines("Elige Producto", "");
 538:	6b ea       	ldi	r22, 0xAB	; 171
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	80 e8       	ldi	r24, 0x80	; 128
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 82 01 	call	0x304	; 0x304 <LCD_wr_lines>
		do t = hastaTecla();
 544:	0e 94 de 01 	call	0x3bc	; 0x3bc <hastaTecla>
 548:	c8 2f       	mov	r28, r24
		while(t != 'A' && t != 'B');
 54a:	8f eb       	ldi	r24, 0xBF	; 191
 54c:	8c 0f       	add	r24, r28
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	c8 f7       	brcc	.-14     	; 0x544 <main+0x44>
		LCD_wr_char(t);
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_wr_char>
		c = (t == 'A'? 3: 23);
 558:	c1 34       	cpi	r28, 0x41	; 65
 55a:	11 f4       	brne	.+4      	; 0x560 <main+0x60>
 55c:	d3 e0       	ldi	r29, 0x03	; 3
 55e:	01 c0       	rjmp	.+2      	; 0x562 <main+0x62>
 560:	d7 e1       	ldi	r29, 0x17	; 23
		do t = hastaTecla();
 562:	0e 94 de 01 	call	0x3bc	; 0x3bc <hastaTecla>
 566:	c8 2f       	mov	r28, r24
		while(t != '1' && t != '2');
 568:	8f ec       	ldi	r24, 0xCF	; 207
 56a:	8c 0f       	add	r24, r28
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	c8 f7       	brcc	.-14     	; 0x562 <main+0x62>
		LCD_wr_char(t);
 570:	8c 2f       	mov	r24, r28
 572:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_wr_char>
		if(t == '2') c += (c == 3? 6: 8);
 576:	c2 33       	cpi	r28, 0x32	; 50
 578:	31 f4       	brne	.+12     	; 0x586 <main+0x86>
 57a:	d3 30       	cpi	r29, 0x03	; 3
 57c:	11 f4       	brne	.+4      	; 0x582 <main+0x82>
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	01 c0       	rjmp	.+2      	; 0x584 <main+0x84>
 582:	88 e0       	ldi	r24, 0x08	; 8
 584:	d8 0f       	add	r29, r24
		LCD_wr_instruction(LCD_Cmd_OnsCsB);
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
		sprintf(uno, "Inserta $%d.00", c);
 58c:	0d 2f       	mov	r16, r29
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	1f 92       	push	r1
 592:	df 93       	push	r29
 594:	8f e8       	ldi	r24, 0x8F	; 143
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	9f 93       	push	r25
 59a:	8f 93       	push	r24
 59c:	8d ec       	ldi	r24, 0xCD	; 205
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	9f 93       	push	r25
 5a2:	8f 93       	push	r24
 5a4:	0e 94 39 03 	call	0x672	; 0x672 <sprintf>
		sprintf(dos, "Tienes $%02d.00", m);
 5a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 5ac:	1f 92       	push	r1
 5ae:	8f 93       	push	r24
 5b0:	80 e7       	ldi	r24, 0x70	; 112
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	9f 93       	push	r25
 5b6:	8f 93       	push	r24
 5b8:	8d eb       	ldi	r24, 0xBD	; 189
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	9f 93       	push	r25
 5be:	8f 93       	push	r24
 5c0:	0e 94 39 03 	call	0x672	; 0x672 <sprintf>
		LCD_wr_lines(uno, dos);
 5c4:	6d eb       	ldi	r22, 0xBD	; 189
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	8d ec       	ldi	r24, 0xCD	; 205
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 82 01 	call	0x304	; 0x304 <LCD_wr_lines>
 5d0:	87 ea       	ldi	r24, 0xA7	; 167
 5d2:	91 e6       	ldi	r25, 0x61	; 97
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0xd4>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0xda>
 5da:	00 00       	nop
		_delay_ms(wait);
		sei();
 5dc:	78 94       	sei
 5de:	8d b7       	in	r24, 0x3d	; 61
 5e0:	9e b7       	in	r25, 0x3e	; 62
 5e2:	0c 96       	adiw	r24, 0x0c	; 12
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	9e bf       	out	0x3e, r25	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	8d bf       	out	0x3d, r24	; 61
		for(;;){
			if(m >= c){
 5ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 5f2:	8d 17       	cp	r24, r29
 5f4:	e0 f3       	brcs	.-8      	; 0x5ee <main+0xee>
				cli();
 5f6:	f8 94       	cli
				sprintf(uno, "Entregando...");
 5f8:	8e e0       	ldi	r24, 0x0E	; 14
 5fa:	ee e9       	ldi	r30, 0x9E	; 158
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ad ec       	ldi	r26, 0xCD	; 205
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	01 90       	ld	r0, Z+
 604:	0d 92       	st	X+, r0
 606:	8a 95       	dec	r24
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x102>
				sprintf(dos, "Cambio %02d.00", m - c);
 60a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	80 1b       	sub	r24, r16
 612:	91 0b       	sbc	r25, r17
 614:	9f 93       	push	r25
 616:	8f 93       	push	r24
 618:	8c ea       	ldi	r24, 0xAC	; 172
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	9f 93       	push	r25
 61e:	8f 93       	push	r24
 620:	8d eb       	ldi	r24, 0xBD	; 189
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	0e 94 39 03 	call	0x672	; 0x672 <sprintf>
				LCD_wr_lines(uno, dos);
 62c:	6d eb       	ldi	r22, 0xBD	; 189
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	8d ec       	ldi	r24, 0xCD	; 205
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 82 01 	call	0x304	; 0x304 <LCD_wr_lines>
				saca_uno(&PORTB, 7);
 638:	67 e0       	ldi	r22, 0x07	; 7
 63a:	88 e3       	ldi	r24, 0x38	; 56
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 49 00 	call	0x92	; 0x92 <saca_uno>
 642:	9f e7       	ldi	r25, 0x7F	; 127
 644:	2a e1       	ldi	r18, 0x1A	; 26
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	20 40       	sbci	r18, 0x00	; 0
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x148>
 650:	00 c0       	rjmp	.+0      	; 0x652 <main+0x152>
 652:	00 00       	nop
				_delay_ms(2000);
				LCD_wr_instruction(LCD_Cmd_Clear);
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_wr_instruction>
				saca_cero(&PORTB, 7);				
 65a:	67 e0       	ldi	r22, 0x07	; 7
 65c:	88 e3       	ldi	r24, 0x38	; 56
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 55 00 	call	0xaa	; 0xaa <saca_cero>
				break;
			}
		}
	}
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	5e cf       	rjmp	.-324    	; 0x52e <main+0x2e>

00000672 <sprintf>:
 672:	ae e0       	ldi	r26, 0x0E	; 14
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__prologue_saves__+0x1c>
 67e:	0d 89       	ldd	r16, Y+21	; 0x15
 680:	1e 89       	ldd	r17, Y+22	; 0x16
 682:	86 e0       	ldi	r24, 0x06	; 6
 684:	8c 83       	std	Y+4, r24	; 0x04
 686:	1a 83       	std	Y+2, r17	; 0x02
 688:	09 83       	std	Y+1, r16	; 0x01
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	9f e7       	ldi	r25, 0x7F	; 127
 68e:	9e 83       	std	Y+6, r25	; 0x06
 690:	8d 83       	std	Y+5, r24	; 0x05
 692:	ae 01       	movw	r20, r28
 694:	47 5e       	subi	r20, 0xE7	; 231
 696:	5f 4f       	sbci	r21, 0xFF	; 255
 698:	6f 89       	ldd	r22, Y+23	; 0x17
 69a:	78 8d       	ldd	r23, Y+24	; 0x18
 69c:	ce 01       	movw	r24, r28
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <vfprintf>
 6a4:	ef 81       	ldd	r30, Y+7	; 0x07
 6a6:	f8 85       	ldd	r31, Y+8	; 0x08
 6a8:	e0 0f       	add	r30, r16
 6aa:	f1 1f       	adc	r31, r17
 6ac:	10 82       	st	Z, r1
 6ae:	2e 96       	adiw	r28, 0x0e	; 14
 6b0:	e4 e0       	ldi	r30, 0x04	; 4
 6b2:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__epilogue_restores__+0x1c>

000006b6 <vfprintf>:
 6b6:	ab e0       	ldi	r26, 0x0B	; 11
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e1 e6       	ldi	r30, 0x61	; 97
 6bc:	f3 e0       	ldi	r31, 0x03	; 3
 6be:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__prologue_saves__>
 6c2:	6c 01       	movw	r12, r24
 6c4:	7b 01       	movw	r14, r22
 6c6:	8a 01       	movw	r16, r20
 6c8:	fc 01       	movw	r30, r24
 6ca:	17 82       	std	Z+7, r1	; 0x07
 6cc:	16 82       	std	Z+6, r1	; 0x06
 6ce:	83 81       	ldd	r24, Z+3	; 0x03
 6d0:	81 ff       	sbrs	r24, 1
 6d2:	cc c1       	rjmp	.+920    	; 0xa6c <vfprintf+0x3b6>
 6d4:	ce 01       	movw	r24, r28
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	3c 01       	movw	r6, r24
 6da:	f6 01       	movw	r30, r12
 6dc:	93 81       	ldd	r25, Z+3	; 0x03
 6de:	f7 01       	movw	r30, r14
 6e0:	93 fd       	sbrc	r25, 3
 6e2:	85 91       	lpm	r24, Z+
 6e4:	93 ff       	sbrs	r25, 3
 6e6:	81 91       	ld	r24, Z+
 6e8:	7f 01       	movw	r14, r30
 6ea:	88 23       	and	r24, r24
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <vfprintf+0x3a>
 6ee:	ba c1       	rjmp	.+884    	; 0xa64 <vfprintf+0x3ae>
 6f0:	85 32       	cpi	r24, 0x25	; 37
 6f2:	39 f4       	brne	.+14     	; 0x702 <vfprintf+0x4c>
 6f4:	93 fd       	sbrc	r25, 3
 6f6:	85 91       	lpm	r24, Z+
 6f8:	93 ff       	sbrs	r25, 3
 6fa:	81 91       	ld	r24, Z+
 6fc:	7f 01       	movw	r14, r30
 6fe:	85 32       	cpi	r24, 0x25	; 37
 700:	29 f4       	brne	.+10     	; 0x70c <vfprintf+0x56>
 702:	b6 01       	movw	r22, r12
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 70a:	e7 cf       	rjmp	.-50     	; 0x6da <vfprintf+0x24>
 70c:	91 2c       	mov	r9, r1
 70e:	21 2c       	mov	r2, r1
 710:	31 2c       	mov	r3, r1
 712:	ff e1       	ldi	r31, 0x1F	; 31
 714:	f3 15       	cp	r31, r3
 716:	d8 f0       	brcs	.+54     	; 0x74e <vfprintf+0x98>
 718:	8b 32       	cpi	r24, 0x2B	; 43
 71a:	79 f0       	breq	.+30     	; 0x73a <vfprintf+0x84>
 71c:	38 f4       	brcc	.+14     	; 0x72c <vfprintf+0x76>
 71e:	80 32       	cpi	r24, 0x20	; 32
 720:	79 f0       	breq	.+30     	; 0x740 <vfprintf+0x8a>
 722:	83 32       	cpi	r24, 0x23	; 35
 724:	a1 f4       	brne	.+40     	; 0x74e <vfprintf+0x98>
 726:	23 2d       	mov	r18, r3
 728:	20 61       	ori	r18, 0x10	; 16
 72a:	1d c0       	rjmp	.+58     	; 0x766 <vfprintf+0xb0>
 72c:	8d 32       	cpi	r24, 0x2D	; 45
 72e:	61 f0       	breq	.+24     	; 0x748 <vfprintf+0x92>
 730:	80 33       	cpi	r24, 0x30	; 48
 732:	69 f4       	brne	.+26     	; 0x74e <vfprintf+0x98>
 734:	23 2d       	mov	r18, r3
 736:	21 60       	ori	r18, 0x01	; 1
 738:	16 c0       	rjmp	.+44     	; 0x766 <vfprintf+0xb0>
 73a:	83 2d       	mov	r24, r3
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	38 2e       	mov	r3, r24
 740:	e3 2d       	mov	r30, r3
 742:	e4 60       	ori	r30, 0x04	; 4
 744:	3e 2e       	mov	r3, r30
 746:	2a c0       	rjmp	.+84     	; 0x79c <vfprintf+0xe6>
 748:	f3 2d       	mov	r31, r3
 74a:	f8 60       	ori	r31, 0x08	; 8
 74c:	1d c0       	rjmp	.+58     	; 0x788 <vfprintf+0xd2>
 74e:	37 fc       	sbrc	r3, 7
 750:	2d c0       	rjmp	.+90     	; 0x7ac <vfprintf+0xf6>
 752:	20 ed       	ldi	r18, 0xD0	; 208
 754:	28 0f       	add	r18, r24
 756:	2a 30       	cpi	r18, 0x0A	; 10
 758:	40 f0       	brcs	.+16     	; 0x76a <vfprintf+0xb4>
 75a:	8e 32       	cpi	r24, 0x2E	; 46
 75c:	b9 f4       	brne	.+46     	; 0x78c <vfprintf+0xd6>
 75e:	36 fc       	sbrc	r3, 6
 760:	81 c1       	rjmp	.+770    	; 0xa64 <vfprintf+0x3ae>
 762:	23 2d       	mov	r18, r3
 764:	20 64       	ori	r18, 0x40	; 64
 766:	32 2e       	mov	r3, r18
 768:	19 c0       	rjmp	.+50     	; 0x79c <vfprintf+0xe6>
 76a:	36 fe       	sbrs	r3, 6
 76c:	06 c0       	rjmp	.+12     	; 0x77a <vfprintf+0xc4>
 76e:	8a e0       	ldi	r24, 0x0A	; 10
 770:	98 9e       	mul	r9, r24
 772:	20 0d       	add	r18, r0
 774:	11 24       	eor	r1, r1
 776:	92 2e       	mov	r9, r18
 778:	11 c0       	rjmp	.+34     	; 0x79c <vfprintf+0xe6>
 77a:	ea e0       	ldi	r30, 0x0A	; 10
 77c:	2e 9e       	mul	r2, r30
 77e:	20 0d       	add	r18, r0
 780:	11 24       	eor	r1, r1
 782:	22 2e       	mov	r2, r18
 784:	f3 2d       	mov	r31, r3
 786:	f0 62       	ori	r31, 0x20	; 32
 788:	3f 2e       	mov	r3, r31
 78a:	08 c0       	rjmp	.+16     	; 0x79c <vfprintf+0xe6>
 78c:	8c 36       	cpi	r24, 0x6C	; 108
 78e:	21 f4       	brne	.+8      	; 0x798 <vfprintf+0xe2>
 790:	83 2d       	mov	r24, r3
 792:	80 68       	ori	r24, 0x80	; 128
 794:	38 2e       	mov	r3, r24
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0xe6>
 798:	88 36       	cpi	r24, 0x68	; 104
 79a:	41 f4       	brne	.+16     	; 0x7ac <vfprintf+0xf6>
 79c:	f7 01       	movw	r30, r14
 79e:	93 fd       	sbrc	r25, 3
 7a0:	85 91       	lpm	r24, Z+
 7a2:	93 ff       	sbrs	r25, 3
 7a4:	81 91       	ld	r24, Z+
 7a6:	7f 01       	movw	r14, r30
 7a8:	81 11       	cpse	r24, r1
 7aa:	b3 cf       	rjmp	.-154    	; 0x712 <vfprintf+0x5c>
 7ac:	98 2f       	mov	r25, r24
 7ae:	9f 7d       	andi	r25, 0xDF	; 223
 7b0:	95 54       	subi	r25, 0x45	; 69
 7b2:	93 30       	cpi	r25, 0x03	; 3
 7b4:	28 f4       	brcc	.+10     	; 0x7c0 <vfprintf+0x10a>
 7b6:	0c 5f       	subi	r16, 0xFC	; 252
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	9f e3       	ldi	r25, 0x3F	; 63
 7bc:	99 83       	std	Y+1, r25	; 0x01
 7be:	0d c0       	rjmp	.+26     	; 0x7da <vfprintf+0x124>
 7c0:	83 36       	cpi	r24, 0x63	; 99
 7c2:	31 f0       	breq	.+12     	; 0x7d0 <vfprintf+0x11a>
 7c4:	83 37       	cpi	r24, 0x73	; 115
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <vfprintf+0x12e>
 7c8:	83 35       	cpi	r24, 0x53	; 83
 7ca:	09 f0       	breq	.+2      	; 0x7ce <vfprintf+0x118>
 7cc:	59 c0       	rjmp	.+178    	; 0x880 <vfprintf+0x1ca>
 7ce:	21 c0       	rjmp	.+66     	; 0x812 <vfprintf+0x15c>
 7d0:	f8 01       	movw	r30, r16
 7d2:	80 81       	ld	r24, Z
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	0e 5f       	subi	r16, 0xFE	; 254
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	88 24       	eor	r8, r8
 7dc:	83 94       	inc	r8
 7de:	91 2c       	mov	r9, r1
 7e0:	53 01       	movw	r10, r6
 7e2:	13 c0       	rjmp	.+38     	; 0x80a <vfprintf+0x154>
 7e4:	28 01       	movw	r4, r16
 7e6:	f2 e0       	ldi	r31, 0x02	; 2
 7e8:	4f 0e       	add	r4, r31
 7ea:	51 1c       	adc	r5, r1
 7ec:	f8 01       	movw	r30, r16
 7ee:	a0 80       	ld	r10, Z
 7f0:	b1 80       	ldd	r11, Z+1	; 0x01
 7f2:	36 fe       	sbrs	r3, 6
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <vfprintf+0x146>
 7f6:	69 2d       	mov	r22, r9
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <vfprintf+0x14a>
 7fc:	6f ef       	ldi	r22, 0xFF	; 255
 7fe:	7f ef       	ldi	r23, 0xFF	; 255
 800:	c5 01       	movw	r24, r10
 802:	0e 94 47 05 	call	0xa8e	; 0xa8e <strnlen>
 806:	4c 01       	movw	r8, r24
 808:	82 01       	movw	r16, r4
 80a:	f3 2d       	mov	r31, r3
 80c:	ff 77       	andi	r31, 0x7F	; 127
 80e:	3f 2e       	mov	r3, r31
 810:	16 c0       	rjmp	.+44     	; 0x83e <vfprintf+0x188>
 812:	28 01       	movw	r4, r16
 814:	22 e0       	ldi	r18, 0x02	; 2
 816:	42 0e       	add	r4, r18
 818:	51 1c       	adc	r5, r1
 81a:	f8 01       	movw	r30, r16
 81c:	a0 80       	ld	r10, Z
 81e:	b1 80       	ldd	r11, Z+1	; 0x01
 820:	36 fe       	sbrs	r3, 6
 822:	03 c0       	rjmp	.+6      	; 0x82a <vfprintf+0x174>
 824:	69 2d       	mov	r22, r9
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x178>
 82a:	6f ef       	ldi	r22, 0xFF	; 255
 82c:	7f ef       	ldi	r23, 0xFF	; 255
 82e:	c5 01       	movw	r24, r10
 830:	0e 94 3c 05 	call	0xa78	; 0xa78 <strnlen_P>
 834:	4c 01       	movw	r8, r24
 836:	f3 2d       	mov	r31, r3
 838:	f0 68       	ori	r31, 0x80	; 128
 83a:	3f 2e       	mov	r3, r31
 83c:	82 01       	movw	r16, r4
 83e:	33 fc       	sbrc	r3, 3
 840:	1b c0       	rjmp	.+54     	; 0x878 <vfprintf+0x1c2>
 842:	82 2d       	mov	r24, r2
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	88 16       	cp	r8, r24
 848:	99 06       	cpc	r9, r25
 84a:	b0 f4       	brcc	.+44     	; 0x878 <vfprintf+0x1c2>
 84c:	b6 01       	movw	r22, r12
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 856:	2a 94       	dec	r2
 858:	f4 cf       	rjmp	.-24     	; 0x842 <vfprintf+0x18c>
 85a:	f5 01       	movw	r30, r10
 85c:	37 fc       	sbrc	r3, 7
 85e:	85 91       	lpm	r24, Z+
 860:	37 fe       	sbrs	r3, 7
 862:	81 91       	ld	r24, Z+
 864:	5f 01       	movw	r10, r30
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 86e:	21 10       	cpse	r2, r1
 870:	2a 94       	dec	r2
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	82 1a       	sub	r8, r18
 876:	91 08       	sbc	r9, r1
 878:	81 14       	cp	r8, r1
 87a:	91 04       	cpc	r9, r1
 87c:	71 f7       	brne	.-36     	; 0x85a <vfprintf+0x1a4>
 87e:	e8 c0       	rjmp	.+464    	; 0xa50 <vfprintf+0x39a>
 880:	84 36       	cpi	r24, 0x64	; 100
 882:	11 f0       	breq	.+4      	; 0x888 <vfprintf+0x1d2>
 884:	89 36       	cpi	r24, 0x69	; 105
 886:	41 f5       	brne	.+80     	; 0x8d8 <vfprintf+0x222>
 888:	f8 01       	movw	r30, r16
 88a:	37 fe       	sbrs	r3, 7
 88c:	07 c0       	rjmp	.+14     	; 0x89c <vfprintf+0x1e6>
 88e:	60 81       	ld	r22, Z
 890:	71 81       	ldd	r23, Z+1	; 0x01
 892:	82 81       	ldd	r24, Z+2	; 0x02
 894:	93 81       	ldd	r25, Z+3	; 0x03
 896:	0c 5f       	subi	r16, 0xFC	; 252
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	08 c0       	rjmp	.+16     	; 0x8ac <vfprintf+0x1f6>
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	07 2e       	mov	r0, r23
 8a2:	00 0c       	add	r0, r0
 8a4:	88 0b       	sbc	r24, r24
 8a6:	99 0b       	sbc	r25, r25
 8a8:	0e 5f       	subi	r16, 0xFE	; 254
 8aa:	1f 4f       	sbci	r17, 0xFF	; 255
 8ac:	f3 2d       	mov	r31, r3
 8ae:	ff 76       	andi	r31, 0x6F	; 111
 8b0:	3f 2e       	mov	r3, r31
 8b2:	97 ff       	sbrs	r25, 7
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x212>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	f0 68       	ori	r31, 0x80	; 128
 8c6:	3f 2e       	mov	r3, r31
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	a3 01       	movw	r20, r6
 8ce:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__ultoa_invert>
 8d2:	88 2e       	mov	r8, r24
 8d4:	86 18       	sub	r8, r6
 8d6:	45 c0       	rjmp	.+138    	; 0x962 <vfprintf+0x2ac>
 8d8:	85 37       	cpi	r24, 0x75	; 117
 8da:	31 f4       	brne	.+12     	; 0x8e8 <vfprintf+0x232>
 8dc:	23 2d       	mov	r18, r3
 8de:	2f 7e       	andi	r18, 0xEF	; 239
 8e0:	b2 2e       	mov	r11, r18
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	25 c0       	rjmp	.+74     	; 0x932 <vfprintf+0x27c>
 8e8:	93 2d       	mov	r25, r3
 8ea:	99 7f       	andi	r25, 0xF9	; 249
 8ec:	b9 2e       	mov	r11, r25
 8ee:	8f 36       	cpi	r24, 0x6F	; 111
 8f0:	c1 f0       	breq	.+48     	; 0x922 <vfprintf+0x26c>
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <vfprintf+0x244>
 8f4:	88 35       	cpi	r24, 0x58	; 88
 8f6:	79 f0       	breq	.+30     	; 0x916 <vfprintf+0x260>
 8f8:	b5 c0       	rjmp	.+362    	; 0xa64 <vfprintf+0x3ae>
 8fa:	80 37       	cpi	r24, 0x70	; 112
 8fc:	19 f0       	breq	.+6      	; 0x904 <vfprintf+0x24e>
 8fe:	88 37       	cpi	r24, 0x78	; 120
 900:	21 f0       	breq	.+8      	; 0x90a <vfprintf+0x254>
 902:	b0 c0       	rjmp	.+352    	; 0xa64 <vfprintf+0x3ae>
 904:	e9 2f       	mov	r30, r25
 906:	e0 61       	ori	r30, 0x10	; 16
 908:	be 2e       	mov	r11, r30
 90a:	b4 fe       	sbrs	r11, 4
 90c:	0d c0       	rjmp	.+26     	; 0x928 <vfprintf+0x272>
 90e:	fb 2d       	mov	r31, r11
 910:	f4 60       	ori	r31, 0x04	; 4
 912:	bf 2e       	mov	r11, r31
 914:	09 c0       	rjmp	.+18     	; 0x928 <vfprintf+0x272>
 916:	34 fe       	sbrs	r3, 4
 918:	0a c0       	rjmp	.+20     	; 0x92e <vfprintf+0x278>
 91a:	29 2f       	mov	r18, r25
 91c:	26 60       	ori	r18, 0x06	; 6
 91e:	b2 2e       	mov	r11, r18
 920:	06 c0       	rjmp	.+12     	; 0x92e <vfprintf+0x278>
 922:	28 e0       	ldi	r18, 0x08	; 8
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	05 c0       	rjmp	.+10     	; 0x932 <vfprintf+0x27c>
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x27c>
 92e:	20 e1       	ldi	r18, 0x10	; 16
 930:	32 e0       	ldi	r19, 0x02	; 2
 932:	f8 01       	movw	r30, r16
 934:	b7 fe       	sbrs	r11, 7
 936:	07 c0       	rjmp	.+14     	; 0x946 <vfprintf+0x290>
 938:	60 81       	ld	r22, Z
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	82 81       	ldd	r24, Z+2	; 0x02
 93e:	93 81       	ldd	r25, Z+3	; 0x03
 940:	0c 5f       	subi	r16, 0xFC	; 252
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x29c>
 946:	60 81       	ld	r22, Z
 948:	71 81       	ldd	r23, Z+1	; 0x01
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 5f       	subi	r16, 0xFE	; 254
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	a3 01       	movw	r20, r6
 954:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__ultoa_invert>
 958:	88 2e       	mov	r8, r24
 95a:	86 18       	sub	r8, r6
 95c:	fb 2d       	mov	r31, r11
 95e:	ff 77       	andi	r31, 0x7F	; 127
 960:	3f 2e       	mov	r3, r31
 962:	36 fe       	sbrs	r3, 6
 964:	0d c0       	rjmp	.+26     	; 0x980 <vfprintf+0x2ca>
 966:	23 2d       	mov	r18, r3
 968:	2e 7f       	andi	r18, 0xFE	; 254
 96a:	a2 2e       	mov	r10, r18
 96c:	89 14       	cp	r8, r9
 96e:	58 f4       	brcc	.+22     	; 0x986 <vfprintf+0x2d0>
 970:	34 fe       	sbrs	r3, 4
 972:	0b c0       	rjmp	.+22     	; 0x98a <vfprintf+0x2d4>
 974:	32 fc       	sbrc	r3, 2
 976:	09 c0       	rjmp	.+18     	; 0x98a <vfprintf+0x2d4>
 978:	83 2d       	mov	r24, r3
 97a:	8e 7e       	andi	r24, 0xEE	; 238
 97c:	a8 2e       	mov	r10, r24
 97e:	05 c0       	rjmp	.+10     	; 0x98a <vfprintf+0x2d4>
 980:	b8 2c       	mov	r11, r8
 982:	a3 2c       	mov	r10, r3
 984:	03 c0       	rjmp	.+6      	; 0x98c <vfprintf+0x2d6>
 986:	b8 2c       	mov	r11, r8
 988:	01 c0       	rjmp	.+2      	; 0x98c <vfprintf+0x2d6>
 98a:	b9 2c       	mov	r11, r9
 98c:	a4 fe       	sbrs	r10, 4
 98e:	0f c0       	rjmp	.+30     	; 0x9ae <vfprintf+0x2f8>
 990:	fe 01       	movw	r30, r28
 992:	e8 0d       	add	r30, r8
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	80 33       	cpi	r24, 0x30	; 48
 99a:	21 f4       	brne	.+8      	; 0x9a4 <vfprintf+0x2ee>
 99c:	9a 2d       	mov	r25, r10
 99e:	99 7e       	andi	r25, 0xE9	; 233
 9a0:	a9 2e       	mov	r10, r25
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <vfprintf+0x300>
 9a4:	a2 fe       	sbrs	r10, 2
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0x2fe>
 9a8:	b3 94       	inc	r11
 9aa:	b3 94       	inc	r11
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <vfprintf+0x300>
 9ae:	8a 2d       	mov	r24, r10
 9b0:	86 78       	andi	r24, 0x86	; 134
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <vfprintf+0x300>
 9b4:	b3 94       	inc	r11
 9b6:	a3 fc       	sbrc	r10, 3
 9b8:	11 c0       	rjmp	.+34     	; 0x9dc <vfprintf+0x326>
 9ba:	a0 fe       	sbrs	r10, 0
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0x314>
 9be:	b2 14       	cp	r11, r2
 9c0:	88 f4       	brcc	.+34     	; 0x9e4 <vfprintf+0x32e>
 9c2:	28 0c       	add	r2, r8
 9c4:	92 2c       	mov	r9, r2
 9c6:	9b 18       	sub	r9, r11
 9c8:	0e c0       	rjmp	.+28     	; 0x9e6 <vfprintf+0x330>
 9ca:	b2 14       	cp	r11, r2
 9cc:	60 f4       	brcc	.+24     	; 0x9e6 <vfprintf+0x330>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 9d8:	b3 94       	inc	r11
 9da:	f7 cf       	rjmp	.-18     	; 0x9ca <vfprintf+0x314>
 9dc:	b2 14       	cp	r11, r2
 9de:	18 f4       	brcc	.+6      	; 0x9e6 <vfprintf+0x330>
 9e0:	2b 18       	sub	r2, r11
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <vfprintf+0x332>
 9e4:	98 2c       	mov	r9, r8
 9e6:	21 2c       	mov	r2, r1
 9e8:	a4 fe       	sbrs	r10, 4
 9ea:	10 c0       	rjmp	.+32     	; 0xa0c <vfprintf+0x356>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e3       	ldi	r24, 0x30	; 48
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 9f6:	a2 fe       	sbrs	r10, 2
 9f8:	17 c0       	rjmp	.+46     	; 0xa28 <vfprintf+0x372>
 9fa:	a1 fc       	sbrc	r10, 1
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x34e>
 9fe:	88 e7       	ldi	r24, 0x78	; 120
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x352>
 a04:	88 e5       	ldi	r24, 0x58	; 88
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	b6 01       	movw	r22, r12
 a0a:	0c c0       	rjmp	.+24     	; 0xa24 <vfprintf+0x36e>
 a0c:	8a 2d       	mov	r24, r10
 a0e:	86 78       	andi	r24, 0x86	; 134
 a10:	59 f0       	breq	.+22     	; 0xa28 <vfprintf+0x372>
 a12:	a1 fe       	sbrs	r10, 1
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x364>
 a16:	8b e2       	ldi	r24, 0x2B	; 43
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <vfprintf+0x366>
 a1a:	80 e2       	ldi	r24, 0x20	; 32
 a1c:	a7 fc       	sbrc	r10, 7
 a1e:	8d e2       	ldi	r24, 0x2D	; 45
 a20:	b6 01       	movw	r22, r12
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 a28:	89 14       	cp	r8, r9
 a2a:	38 f4       	brcc	.+14     	; 0xa3a <vfprintf+0x384>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e3       	ldi	r24, 0x30	; 48
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 a36:	9a 94       	dec	r9
 a38:	f7 cf       	rjmp	.-18     	; 0xa28 <vfprintf+0x372>
 a3a:	8a 94       	dec	r8
 a3c:	f3 01       	movw	r30, r6
 a3e:	e8 0d       	add	r30, r8
 a40:	f1 1d       	adc	r31, r1
 a42:	80 81       	ld	r24, Z
 a44:	b6 01       	movw	r22, r12
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 a4c:	81 10       	cpse	r8, r1
 a4e:	f5 cf       	rjmp	.-22     	; 0xa3a <vfprintf+0x384>
 a50:	22 20       	and	r2, r2
 a52:	09 f4       	brne	.+2      	; 0xa56 <vfprintf+0x3a0>
 a54:	42 ce       	rjmp	.-892    	; 0x6da <vfprintf+0x24>
 a56:	b6 01       	movw	r22, r12
 a58:	80 e2       	ldi	r24, 0x20	; 32
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <fputc>
 a60:	2a 94       	dec	r2
 a62:	f6 cf       	rjmp	.-20     	; 0xa50 <vfprintf+0x39a>
 a64:	f6 01       	movw	r30, r12
 a66:	86 81       	ldd	r24, Z+6	; 0x06
 a68:	97 81       	ldd	r25, Z+7	; 0x07
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0x3ba>
 a6c:	8f ef       	ldi	r24, 0xFF	; 255
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	2b 96       	adiw	r28, 0x0b	; 11
 a72:	e2 e1       	ldi	r30, 0x12	; 18
 a74:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__epilogue_restores__>

00000a78 <strnlen_P>:
 a78:	fc 01       	movw	r30, r24
 a7a:	05 90       	lpm	r0, Z+
 a7c:	61 50       	subi	r22, 0x01	; 1
 a7e:	70 40       	sbci	r23, 0x00	; 0
 a80:	01 10       	cpse	r0, r1
 a82:	d8 f7       	brcc	.-10     	; 0xa7a <strnlen_P+0x2>
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	8e 0f       	add	r24, r30
 a8a:	9f 1f       	adc	r25, r31
 a8c:	08 95       	ret

00000a8e <strnlen>:
 a8e:	fc 01       	movw	r30, r24
 a90:	61 50       	subi	r22, 0x01	; 1
 a92:	70 40       	sbci	r23, 0x00	; 0
 a94:	01 90       	ld	r0, Z+
 a96:	01 10       	cpse	r0, r1
 a98:	d8 f7       	brcc	.-10     	; 0xa90 <strnlen+0x2>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	8e 0f       	add	r24, r30
 aa0:	9f 1f       	adc	r25, r31
 aa2:	08 95       	ret

00000aa4 <fputc>:
 aa4:	0f 93       	push	r16
 aa6:	1f 93       	push	r17
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	fb 01       	movw	r30, r22
 aae:	23 81       	ldd	r18, Z+3	; 0x03
 ab0:	21 fd       	sbrc	r18, 1
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <fputc+0x16>
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	9f ef       	ldi	r25, 0xFF	; 255
 ab8:	2c c0       	rjmp	.+88     	; 0xb12 <fputc+0x6e>
 aba:	22 ff       	sbrs	r18, 2
 abc:	16 c0       	rjmp	.+44     	; 0xaea <fputc+0x46>
 abe:	46 81       	ldd	r20, Z+6	; 0x06
 ac0:	57 81       	ldd	r21, Z+7	; 0x07
 ac2:	24 81       	ldd	r18, Z+4	; 0x04
 ac4:	35 81       	ldd	r19, Z+5	; 0x05
 ac6:	42 17       	cp	r20, r18
 ac8:	53 07       	cpc	r21, r19
 aca:	44 f4       	brge	.+16     	; 0xadc <fputc+0x38>
 acc:	a0 81       	ld	r26, Z
 ace:	b1 81       	ldd	r27, Z+1	; 0x01
 ad0:	9d 01       	movw	r18, r26
 ad2:	2f 5f       	subi	r18, 0xFF	; 255
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	31 83       	std	Z+1, r19	; 0x01
 ad8:	20 83       	st	Z, r18
 ada:	8c 93       	st	X, r24
 adc:	26 81       	ldd	r18, Z+6	; 0x06
 ade:	37 81       	ldd	r19, Z+7	; 0x07
 ae0:	2f 5f       	subi	r18, 0xFF	; 255
 ae2:	3f 4f       	sbci	r19, 0xFF	; 255
 ae4:	37 83       	std	Z+7, r19	; 0x07
 ae6:	26 83       	std	Z+6, r18	; 0x06
 ae8:	14 c0       	rjmp	.+40     	; 0xb12 <fputc+0x6e>
 aea:	8b 01       	movw	r16, r22
 aec:	ec 01       	movw	r28, r24
 aee:	fb 01       	movw	r30, r22
 af0:	00 84       	ldd	r0, Z+8	; 0x08
 af2:	f1 85       	ldd	r31, Z+9	; 0x09
 af4:	e0 2d       	mov	r30, r0
 af6:	09 95       	icall
 af8:	89 2b       	or	r24, r25
 afa:	e1 f6       	brne	.-72     	; 0xab4 <fputc+0x10>
 afc:	d8 01       	movw	r26, r16
 afe:	16 96       	adiw	r26, 0x06	; 6
 b00:	8d 91       	ld	r24, X+
 b02:	9c 91       	ld	r25, X
 b04:	17 97       	sbiw	r26, 0x07	; 7
 b06:	01 96       	adiw	r24, 0x01	; 1
 b08:	17 96       	adiw	r26, 0x07	; 7
 b0a:	9c 93       	st	X, r25
 b0c:	8e 93       	st	-X, r24
 b0e:	16 97       	sbiw	r26, 0x06	; 6
 b10:	ce 01       	movw	r24, r28
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	1f 91       	pop	r17
 b18:	0f 91       	pop	r16
 b1a:	08 95       	ret

00000b1c <__ultoa_invert>:
 b1c:	fa 01       	movw	r30, r20
 b1e:	aa 27       	eor	r26, r26
 b20:	28 30       	cpi	r18, 0x08	; 8
 b22:	51 f1       	breq	.+84     	; 0xb78 <__ultoa_invert+0x5c>
 b24:	20 31       	cpi	r18, 0x10	; 16
 b26:	81 f1       	breq	.+96     	; 0xb88 <__ultoa_invert+0x6c>
 b28:	e8 94       	clt
 b2a:	6f 93       	push	r22
 b2c:	6e 7f       	andi	r22, 0xFE	; 254
 b2e:	6e 5f       	subi	r22, 0xFE	; 254
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	af 4f       	sbci	r26, 0xFF	; 255
 b38:	b1 e0       	ldi	r27, 0x01	; 1
 b3a:	3e d0       	rcall	.+124    	; 0xbb8 <__ultoa_invert+0x9c>
 b3c:	b4 e0       	ldi	r27, 0x04	; 4
 b3e:	3c d0       	rcall	.+120    	; 0xbb8 <__ultoa_invert+0x9c>
 b40:	67 0f       	add	r22, r23
 b42:	78 1f       	adc	r23, r24
 b44:	89 1f       	adc	r24, r25
 b46:	9a 1f       	adc	r25, r26
 b48:	a1 1d       	adc	r26, r1
 b4a:	68 0f       	add	r22, r24
 b4c:	79 1f       	adc	r23, r25
 b4e:	8a 1f       	adc	r24, r26
 b50:	91 1d       	adc	r25, r1
 b52:	a1 1d       	adc	r26, r1
 b54:	6a 0f       	add	r22, r26
 b56:	71 1d       	adc	r23, r1
 b58:	81 1d       	adc	r24, r1
 b5a:	91 1d       	adc	r25, r1
 b5c:	a1 1d       	adc	r26, r1
 b5e:	20 d0       	rcall	.+64     	; 0xba0 <__ultoa_invert+0x84>
 b60:	09 f4       	brne	.+2      	; 0xb64 <__ultoa_invert+0x48>
 b62:	68 94       	set
 b64:	3f 91       	pop	r19
 b66:	2a e0       	ldi	r18, 0x0A	; 10
 b68:	26 9f       	mul	r18, r22
 b6a:	11 24       	eor	r1, r1
 b6c:	30 19       	sub	r19, r0
 b6e:	30 5d       	subi	r19, 0xD0	; 208
 b70:	31 93       	st	Z+, r19
 b72:	de f6       	brtc	.-74     	; 0xb2a <__ultoa_invert+0xe>
 b74:	cf 01       	movw	r24, r30
 b76:	08 95       	ret
 b78:	46 2f       	mov	r20, r22
 b7a:	47 70       	andi	r20, 0x07	; 7
 b7c:	40 5d       	subi	r20, 0xD0	; 208
 b7e:	41 93       	st	Z+, r20
 b80:	b3 e0       	ldi	r27, 0x03	; 3
 b82:	0f d0       	rcall	.+30     	; 0xba2 <__ultoa_invert+0x86>
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__ultoa_invert+0x5c>
 b86:	f6 cf       	rjmp	.-20     	; 0xb74 <__ultoa_invert+0x58>
 b88:	46 2f       	mov	r20, r22
 b8a:	4f 70       	andi	r20, 0x0F	; 15
 b8c:	40 5d       	subi	r20, 0xD0	; 208
 b8e:	4a 33       	cpi	r20, 0x3A	; 58
 b90:	18 f0       	brcs	.+6      	; 0xb98 <__ultoa_invert+0x7c>
 b92:	49 5d       	subi	r20, 0xD9	; 217
 b94:	31 fd       	sbrc	r19, 1
 b96:	40 52       	subi	r20, 0x20	; 32
 b98:	41 93       	st	Z+, r20
 b9a:	02 d0       	rcall	.+4      	; 0xba0 <__ultoa_invert+0x84>
 b9c:	a9 f7       	brne	.-22     	; 0xb88 <__ultoa_invert+0x6c>
 b9e:	ea cf       	rjmp	.-44     	; 0xb74 <__ultoa_invert+0x58>
 ba0:	b4 e0       	ldi	r27, 0x04	; 4
 ba2:	a6 95       	lsr	r26
 ba4:	97 95       	ror	r25
 ba6:	87 95       	ror	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	ba 95       	dec	r27
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0x86>
 bb0:	00 97       	sbiw	r24, 0x00	; 0
 bb2:	61 05       	cpc	r22, r1
 bb4:	71 05       	cpc	r23, r1
 bb6:	08 95       	ret
 bb8:	9b 01       	movw	r18, r22
 bba:	ac 01       	movw	r20, r24
 bbc:	0a 2e       	mov	r0, r26
 bbe:	06 94       	lsr	r0
 bc0:	57 95       	ror	r21
 bc2:	47 95       	ror	r20
 bc4:	37 95       	ror	r19
 bc6:	27 95       	ror	r18
 bc8:	ba 95       	dec	r27
 bca:	c9 f7       	brne	.-14     	; 0xbbe <__ultoa_invert+0xa2>
 bcc:	62 0f       	add	r22, r18
 bce:	73 1f       	adc	r23, r19
 bd0:	84 1f       	adc	r24, r20
 bd2:	95 1f       	adc	r25, r21
 bd4:	a0 1d       	adc	r26, r0
 bd6:	08 95       	ret

00000bd8 <__prologue_saves__>:
 bd8:	2f 92       	push	r2
 bda:	3f 92       	push	r3
 bdc:	4f 92       	push	r4
 bde:	5f 92       	push	r5
 be0:	6f 92       	push	r6
 be2:	7f 92       	push	r7
 be4:	8f 92       	push	r8
 be6:	9f 92       	push	r9
 be8:	af 92       	push	r10
 bea:	bf 92       	push	r11
 bec:	cf 92       	push	r12
 bee:	df 92       	push	r13
 bf0:	ef 92       	push	r14
 bf2:	ff 92       	push	r15
 bf4:	0f 93       	push	r16
 bf6:	1f 93       	push	r17
 bf8:	cf 93       	push	r28
 bfa:	df 93       	push	r29
 bfc:	cd b7       	in	r28, 0x3d	; 61
 bfe:	de b7       	in	r29, 0x3e	; 62
 c00:	ca 1b       	sub	r28, r26
 c02:	db 0b       	sbc	r29, r27
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	de bf       	out	0x3e, r29	; 62
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	cd bf       	out	0x3d, r28	; 61
 c0e:	09 94       	ijmp

00000c10 <__epilogue_restores__>:
 c10:	2a 88       	ldd	r2, Y+18	; 0x12
 c12:	39 88       	ldd	r3, Y+17	; 0x11
 c14:	48 88       	ldd	r4, Y+16	; 0x10
 c16:	5f 84       	ldd	r5, Y+15	; 0x0f
 c18:	6e 84       	ldd	r6, Y+14	; 0x0e
 c1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c20:	aa 84       	ldd	r10, Y+10	; 0x0a
 c22:	b9 84       	ldd	r11, Y+9	; 0x09
 c24:	c8 84       	ldd	r12, Y+8	; 0x08
 c26:	df 80       	ldd	r13, Y+7	; 0x07
 c28:	ee 80       	ldd	r14, Y+6	; 0x06
 c2a:	fd 80       	ldd	r15, Y+5	; 0x05
 c2c:	0c 81       	ldd	r16, Y+4	; 0x04
 c2e:	1b 81       	ldd	r17, Y+3	; 0x03
 c30:	aa 81       	ldd	r26, Y+2	; 0x02
 c32:	b9 81       	ldd	r27, Y+1	; 0x01
 c34:	ce 0f       	add	r28, r30
 c36:	d1 1d       	adc	r29, r1
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de bf       	out	0x3e, r29	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd bf       	out	0x3d, r28	; 61
 c42:	ed 01       	movw	r28, r26
 c44:	08 95       	ret

00000c46 <_exit>:
 c46:	f8 94       	cli

00000c48 <__stop_program>:
 c48:	ff cf       	rjmp	.-2      	; 0xc48 <__stop_program>
