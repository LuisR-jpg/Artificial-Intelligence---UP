
III. Matricial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bb  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000361  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b1  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <print>:
	{0xE, 0x0, 0xF, 0xD}
};
uint8_t tecla, c = 0, d = 0, n[] = {0, 0, 0};

void print(){
	for(uint8_t i = 0; i < 3; i++){
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	12 c0       	rjmp	.+36     	; 0xba <print+0x28>
		PORTB = (n[i] | (1 << (5 + i)));
  96:	24 2f       	mov	r18, r20
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	f9 01       	movw	r30, r18
  9c:	e0 59       	subi	r30, 0x90	; 144
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	50 81       	ld	r21, Z
  a2:	2b 5f       	subi	r18, 0xFB	; 251
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <print+0x1e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	2a 95       	dec	r18
  b2:	e2 f7       	brpl	.-8      	; 0xac <print+0x1a>
  b4:	85 2b       	or	r24, r21
  b6:	88 bb       	out	0x18, r24	; 24
	{0xE, 0x0, 0xF, 0xD}
};
uint8_t tecla, c = 0, d = 0, n[] = {0, 0, 0};

void print(){
	for(uint8_t i = 0; i < 3; i++){
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	43 30       	cpi	r20, 0x03	; 3
  bc:	60 f3       	brcs	.-40     	; 0x96 <print+0x4>
		PORTB = (n[i] | (1 << (5 + i)));
	}
}
  be:	08 95       	ret

000000c0 <hastaTecla>:
uint8_t hastaTecla(){
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	for(uint8_t i = 0;; i++, i %= 4){
  ca:	f1 2c       	mov	r15, r1
		print();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <print>
		PORTX = ~(1 << i);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0f 2c       	mov	r0, r15
  da:	02 c0       	rjmp	.+4      	; 0xe0 <hastaTecla+0x20>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <hastaTecla+0x1c>
  e4:	80 95       	com	r24
  e6:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  e8:	00 00       	nop
		asm("nop");
  ea:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  ec:	24 e0       	ldi	r18, 0x04	; 4
  ee:	39 c0       	rjmp	.+114    	; 0x162 <hastaTecla+0xa2>
			if(isClear(PINX, j)){
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	c2 2f       	mov	r28, r18
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <hastaTecla+0x40>
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <hastaTecla+0x3c>
 104:	80 fd       	sbrc	r24, 0
 106:	2c c0       	rjmp	.+88     	; 0x160 <hastaTecla+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <hastaTecla+0x4c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <hastaTecla+0x52>
 112:	00 00       	nop
 114:	02 c0       	rjmp	.+4      	; 0x11a <hastaTecla+0x5a>
				_delay_ms(50);
				while(isClear(PINX, j))
					print();
 116:	0e 94 49 00 	call	0x92	; 0x92 <print>
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
			if(isClear(PINX, j)){
				_delay_ms(50);
				while(isClear(PINX, j))
 11a:	89 b3       	in	r24, 0x19	; 25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0c 2e       	mov	r0, r28
 120:	02 c0       	rjmp	.+4      	; 0x126 <hastaTecla+0x66>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <hastaTecla+0x62>
 12a:	80 ff       	sbrs	r24, 0
 12c:	f4 cf       	rjmp	.-24     	; 0x116 <hastaTecla+0x56>
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <hastaTecla+0x72>
 136:	00 c0       	rjmp	.+0      	; 0x138 <hastaTecla+0x78>
 138:	00 00       	nop
					print();
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	8c 1b       	sub	r24, r28
 140:	9d 0b       	sbc	r25, r29
 142:	23 e0       	ldi	r18, 0x03	; 3
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	20 1b       	sub	r18, r16
 148:	31 0b       	sbc	r19, r17
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	80 5a       	subi	r24, 0xA0	; 160
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	fc 01       	movw	r30, r24
 158:	e2 0f       	add	r30, r18
 15a:	f3 1f       	adc	r31, r19
 15c:	80 81       	ld	r24, Z
 15e:	08 c0       	rjmp	.+16     	; 0x170 <hastaTecla+0xb0>
	for(uint8_t i = 0;; i++, i %= 4){
		print();
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	28 30       	cpi	r18, 0x08	; 8
 164:	28 f2       	brcs	.-118    	; 0xf0 <hastaTecla+0x30>
	for(uint8_t i = 0; i < 3; i++){
		PORTB = (n[i] | (1 << (5 + i)));
	}
}
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	8f 0d       	add	r24, r15
 16a:	83 70       	andi	r24, 0x03	; 3
 16c:	f8 2e       	mov	r15, r24
					print();
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 16e:	ae cf       	rjmp	.-164    	; 0xcc <hastaTecla+0xc>
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	08 95       	ret

0000017c <start>:

void start(){
	tecla = c = d = n[0] = n[1] = n[2] = 0;
 17c:	e0 e7       	ldi	r30, 0x70	; 112
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	12 82       	std	Z+2, r1	; 0x02
 182:	11 82       	std	Z+1, r1	; 0x01
 184:	10 82       	st	Z, r1
 186:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <d>
 18a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <c>
 18e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <tecla>
	DDRX = 0x0F;
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	8a bb       	out	0x1a, r24	; 26
	PORTX = 0xFF;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
 19a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 19c:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;
 19e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 1a0:	12 ba       	out	0x12, r1	; 18
	DDRB = 0xFF;
 1a2:	87 bb       	out	0x17, r24	; 23
 1a4:	08 95       	ret

000001a6 <main>:
}
int main(){
	start();
 1a6:	0e 94 be 00 	call	0x17c	; 0x17c <start>
    for(;;){
	    tecla = hastaTecla();
 1aa:	0e 94 60 00 	call	0xc0	; 0xc0 <hastaTecla>
 1ae:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <tecla>
		if(tecla == 0xF){
 1b2:	8f 30       	cpi	r24, 0x0F	; 15
 1b4:	19 f4       	brne	.+6      	; 0x1bc <main+0x16>
			start();
 1b6:	0e 94 be 00 	call	0x17c	; 0x17c <start>
			continue;
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <main+0x4>
		}
		n[2] = n[1], n[1] = n[0], n[0] = tecla;
 1bc:	e0 e7       	ldi	r30, 0x70	; 112
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	91 81       	ldd	r25, Z+1	; 0x01
 1c2:	92 83       	std	Z+2, r25	; 0x02
 1c4:	90 81       	ld	r25, Z
 1c6:	91 83       	std	Z+1, r25	; 0x01
 1c8:	80 83       	st	Z, r24
		d = c >> 4;
 1ca:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <c>
 1ce:	29 2f       	mov	r18, r25
 1d0:	22 95       	swap	r18
 1d2:	2f 70       	andi	r18, 0x0F	; 15
 1d4:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <d>
		c <<= 4;
 1d8:	92 95       	swap	r25
 1da:	90 7f       	andi	r25, 0xF0	; 240
		c |= tecla;
 1dc:	89 2b       	or	r24, r25
 1de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <c>
		PORTC = c;
 1e2:	85 bb       	out	0x15, r24	; 21
		PORTD = d;
 1e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <d>
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	df cf       	rjmp	.-66     	; 0x1aa <main+0x4>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
