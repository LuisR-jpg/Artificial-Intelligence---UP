
III. Matricial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071e  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061a  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  7a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <hastaTecla>:
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++){
  82:	30 e0       	ldi	r19, 0x00	; 0
		if(i == 4) i = 0;
  84:	34 30       	cpi	r19, 0x04	; 4
  86:	09 f4       	brne	.+2      	; 0x8a <hastaTecla+0x8>
  88:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
  8a:	43 2f       	mov	r20, r19
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	03 2e       	mov	r0, r19
  94:	02 c0       	rjmp	.+4      	; 0x9a <hastaTecla+0x18>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <hastaTecla+0x14>
  9e:	80 95       	com	r24
  a0:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  a2:	00 00       	nop
		asm("nop");
  a4:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  a6:	24 e0       	ldi	r18, 0x04	; 4
  a8:	36 c0       	rjmp	.+108    	; 0x116 <hastaTecla+0x94>
			if(isClear(PINX, j)){
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	62 2f       	mov	r22, r18
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <hastaTecla+0x38>
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <hastaTecla+0x34>
  be:	80 fd       	sbrc	r24, 0
  c0:	29 c0       	rjmp	.+82     	; 0x114 <hastaTecla+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <hastaTecla+0x44>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <hastaTecla+0x4a>
  cc:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINX, j));
  ce:	89 b3       	in	r24, 0x19	; 25
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	06 2e       	mov	r0, r22
  d4:	02 c0       	rjmp	.+4      	; 0xda <hastaTecla+0x58>
  d6:	95 95       	asr	r25
  d8:	87 95       	ror	r24
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <hastaTecla+0x54>
  de:	80 ff       	sbrs	r24, 0
  e0:	f6 cf       	rjmp	.-20     	; 0xce <hastaTecla+0x4c>
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <hastaTecla+0x64>
  ea:	00 c0       	rjmp	.+0      	; 0xec <hastaTecla+0x6a>
  ec:	00 00       	nop
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
  ee:	87 e0       	ldi	r24, 0x07	; 7
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	86 1b       	sub	r24, r22
  f4:	97 0b       	sbc	r25, r23
  f6:	23 e0       	ldi	r18, 0x03	; 3
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	24 1b       	sub	r18, r20
  fc:	35 0b       	sbc	r19, r21
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	80 5a       	subi	r24, 0xA0	; 160
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	fc 01       	movw	r30, r24
 10c:	e2 0f       	add	r30, r18
 10e:	f3 1f       	adc	r31, r19
 110:	80 81       	ld	r24, Z
 112:	08 95       	ret
	for(uint8_t i = 0;; i++){
		if(i == 4) i = 0;
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	28 30       	cpi	r18, 0x08	; 8
 118:	40 f2       	brcs	.-112    	; 0xaa <hastaTecla+0x28>
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++){
 11a:	3f 5f       	subi	r19, 0xFF	; 255
				while(isClear(PINX, j));
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 11c:	b3 cf       	rjmp	.-154    	; 0x84 <hastaTecla+0x2>

0000011e <main>:
}

int main(){
    DDRX = 0x0F;
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	8a bb       	out	0x1a, r24	; 26
    PORTX = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
 126:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 128:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF;
 12a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 12c:	12 ba       	out	0x12, r1	; 18
    uint8_t tecla, c = 0, d = 0;
 12e:	c0 e0       	ldi	r28, 0x00	; 0
    for(;;){
	    tecla = hastaTecla();
 130:	0e 94 41 00 	call	0x82	; 0x82 <hastaTecla>
		d = c >> 4;
 134:	9c 2f       	mov	r25, r28
 136:	92 95       	swap	r25
 138:	9f 70       	andi	r25, 0x0F	; 15
		c <<= 4;
 13a:	c2 95       	swap	r28
 13c:	c0 7f       	andi	r28, 0xF0	; 240
		c |= tecla;
 13e:	c8 2b       	or	r28, r24
		PORTC = c;
 140:	c5 bb       	out	0x15, r28	; 21
		PORTD = d;
 142:	92 bb       	out	0x12, r25	; 18
 144:	f5 cf       	rjmp	.-22     	; 0x130 <main+0x12>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
