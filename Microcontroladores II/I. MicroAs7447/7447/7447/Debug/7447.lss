
7447.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000608  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056b  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  00000d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000304  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define dEIGHT	0b10000000
#define dNINE	0b10010000

int main(void)
{
	DDRA = 0x0F;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
    for(;;){
		//PINA >> 4 should work, but fails in proteus
		int8_t dip = 0, r = 0xFF, read = PINA;
  76:	49 b3       	in	r20, 0x19	; 25
		for(int8_t i = 0; i < 4; i++)
  78:	30 e0       	ldi	r19, 0x00	; 0
	DDRA = 0x0F;
	PORTA = 0xFF;
	DDRC = 0xFF;
    for(;;){
		//PINA >> 4 should work, but fails in proteus
		int8_t dip = 0, r = 0xFF, read = PINA;
  7a:	20 e0       	ldi	r18, 0x00	; 0
		for(int8_t i = 0; i < 4; i++)
  7c:	10 c0       	rjmp	.+32     	; 0x9e <main+0x32>
			dip += ((read >> 4) & (1 << i));
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	03 2e       	mov	r0, r19
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	94 2f       	mov	r25, r20
  90:	95 95       	asr	r25
  92:	95 95       	asr	r25
  94:	95 95       	asr	r25
  96:	95 95       	asr	r25
  98:	89 23       	and	r24, r25
  9a:	28 0f       	add	r18, r24
	PORTA = 0xFF;
	DDRC = 0xFF;
    for(;;){
		//PINA >> 4 should work, but fails in proteus
		int8_t dip = 0, r = 0xFF, read = PINA;
		for(int8_t i = 0; i < 4; i++)
  9c:	3f 5f       	subi	r19, 0xFF	; 255
  9e:	34 30       	cpi	r19, 0x04	; 4
  a0:	74 f3       	brlt	.-36     	; 0x7e <main+0x12>
			dip += ((read >> 4) & (1 << i));
		if(dip == 0) r = dZERO;
  a2:	22 23       	and	r18, r18
  a4:	11 f0       	breq	.+4      	; 0xaa <main+0x3e>
	DDRA = 0x0F;
	PORTA = 0xFF;
	DDRC = 0xFF;
    for(;;){
		//PINA >> 4 should work, but fails in proteus
		int8_t dip = 0, r = 0xFF, read = PINA;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x40>
		for(int8_t i = 0; i < 4; i++)
			dip += ((read >> 4) & (1 << i));
		if(dip == 0) r = dZERO;
  aa:	80 ec       	ldi	r24, 0xC0	; 192
		if(dip == 1) r = dONE;
  ac:	21 30       	cpi	r18, 0x01	; 1
  ae:	09 f4       	brne	.+2      	; 0xb2 <main+0x46>
  b0:	89 ef       	ldi	r24, 0xF9	; 249
		if(dip == 2) r = dTWO;
  b2:	22 30       	cpi	r18, 0x02	; 2
  b4:	09 f4       	brne	.+2      	; 0xb8 <main+0x4c>
  b6:	84 ea       	ldi	r24, 0xA4	; 164
		if(dip == 3) r = dTHREE;
  b8:	23 30       	cpi	r18, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <main+0x52>
  bc:	80 eb       	ldi	r24, 0xB0	; 176
		if(dip == 4) r = dFOUR;
  be:	24 30       	cpi	r18, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <main+0x58>
  c2:	89 e9       	ldi	r24, 0x99	; 153
		if(dip == 5) r = dFIVE;
  c4:	25 30       	cpi	r18, 0x05	; 5
  c6:	09 f4       	brne	.+2      	; 0xca <main+0x5e>
  c8:	82 e9       	ldi	r24, 0x92	; 146
		if(dip == 6) r = dSIX;
  ca:	26 30       	cpi	r18, 0x06	; 6
  cc:	09 f4       	brne	.+2      	; 0xd0 <main+0x64>
  ce:	82 e8       	ldi	r24, 0x82	; 130
		if(dip == 7) r = dSEVEN;
  d0:	27 30       	cpi	r18, 0x07	; 7
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x6a>
  d4:	88 ef       	ldi	r24, 0xF8	; 248
		if(dip == 8) r = dEIGHT;
  d6:	28 30       	cpi	r18, 0x08	; 8
  d8:	09 f4       	brne	.+2      	; 0xdc <main+0x70>
  da:	80 e8       	ldi	r24, 0x80	; 128
		if(dip == 9) r = dNINE;
  dc:	29 30       	cpi	r18, 0x09	; 9
  de:	09 f4       	brne	.+2      	; 0xe2 <main+0x76>
  e0:	80 e9       	ldi	r24, 0x90	; 144
		PORTC = ~r;
  e2:	80 95       	com	r24
  e4:	85 bb       	out	0x15, r24	; 21
    }
  e6:	c7 cf       	rjmp	.-114    	; 0x76 <main+0xa>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
