
7447.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e6  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000564  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002e  00000000  00000000  0000122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define dEIGHT	0b10000000
#define dNINE	0b10010000

int main(void)
{
	DDRA = 0x0F;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
		/*
		int8_t dip = 0, r = 0xFF, read = PINA;
		for(int8_t i = 0; i < 4; i++)
			dip += ((read >> 4) & (1 << i));
		*/
		int8_t dip = PINA >> 4, r = 0xFF;
  76:	89 b3       	in	r24, 0x19	; 25
  78:	82 95       	swap	r24
  7a:	8f 70       	andi	r24, 0x0F	; 15
		if(dip == 0) r = dZERO;
  7c:	11 f0       	breq	.+4      	; 0x82 <main+0x16>
		/*
		int8_t dip = 0, r = 0xFF, read = PINA;
		for(int8_t i = 0; i < 4; i++)
			dip += ((read >> 4) & (1 << i));
		*/
		int8_t dip = PINA >> 4, r = 0xFF;
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	01 c0       	rjmp	.+2      	; 0x84 <main+0x18>
		if(dip == 0) r = dZERO;
  82:	90 ec       	ldi	r25, 0xC0	; 192
		if(dip == 1) r = dONE;
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	09 f4       	brne	.+2      	; 0x8a <main+0x1e>
  88:	99 ef       	ldi	r25, 0xF9	; 249
		if(dip == 2) r = dTWO;
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	09 f4       	brne	.+2      	; 0x90 <main+0x24>
  8e:	94 ea       	ldi	r25, 0xA4	; 164
		if(dip == 3) r = dTHREE;
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	09 f4       	brne	.+2      	; 0x96 <main+0x2a>
  94:	90 eb       	ldi	r25, 0xB0	; 176
		if(dip == 4) r = dFOUR;
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	09 f4       	brne	.+2      	; 0x9c <main+0x30>
  9a:	99 e9       	ldi	r25, 0x99	; 153
		if(dip == 5) r = dFIVE;
  9c:	85 30       	cpi	r24, 0x05	; 5
  9e:	09 f4       	brne	.+2      	; 0xa2 <main+0x36>
  a0:	92 e9       	ldi	r25, 0x92	; 146
		if(dip == 6) r = dSIX;
  a2:	86 30       	cpi	r24, 0x06	; 6
  a4:	09 f4       	brne	.+2      	; 0xa8 <main+0x3c>
  a6:	92 e8       	ldi	r25, 0x82	; 130
		if(dip == 7) r = dSEVEN;
  a8:	87 30       	cpi	r24, 0x07	; 7
  aa:	09 f4       	brne	.+2      	; 0xae <main+0x42>
  ac:	98 ef       	ldi	r25, 0xF8	; 248
		if(dip == 8) r = dEIGHT;
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	09 f4       	brne	.+2      	; 0xb4 <main+0x48>
  b2:	90 e8       	ldi	r25, 0x80	; 128
		if(dip == 9) r = dNINE;
  b4:	89 30       	cpi	r24, 0x09	; 9
  b6:	09 f4       	brne	.+2      	; 0xba <main+0x4e>
  b8:	90 e9       	ldi	r25, 0x90	; 144
		PORTC = ~r;
  ba:	90 95       	com	r25
  bc:	95 bb       	out	0x15, r25	; 21
    }
  be:	db cf       	rjmp	.-74     	; 0x76 <main+0xa>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
