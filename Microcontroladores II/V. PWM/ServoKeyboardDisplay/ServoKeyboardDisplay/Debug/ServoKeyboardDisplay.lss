
ServoKeyboardDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  7a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <print>:
	{0x4, 0x5, 0x6, 0xB},
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};
uint8_t print(uint8_t cont){
	return (((cont & 1) << 5) | ((cont & 2) << 3) | ((cont & 4) << 1) | ((cont & 8) >> 1));
  82:	68 2f       	mov	r22, r24
  84:	61 70       	andi	r22, 0x01	; 1
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	fb 01       	movw	r30, r22
  8a:	ee 0f       	add	r30, r30
  8c:	ff 1f       	adc	r31, r31
  8e:	e2 95       	swap	r30
  90:	f2 95       	swap	r31
  92:	f0 7f       	andi	r31, 0xF0	; 240
  94:	fe 27       	eor	r31, r30
  96:	e0 7f       	andi	r30, 0xF0	; 240
  98:	fe 27       	eor	r31, r30
  9a:	98 2f       	mov	r25, r24
  9c:	92 70       	andi	r25, 0x02	; 2
  9e:	69 2f       	mov	r22, r25
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	66 0f       	add	r22, r22
  a4:	77 1f       	adc	r23, r23
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	98 2f       	mov	r25, r24
  b0:	94 70       	andi	r25, 0x04	; 4
  b2:	49 2f       	mov	r20, r25
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	88 70       	andi	r24, 0x08	; 8
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	35 95       	asr	r19
  c2:	27 95       	ror	r18
  c4:	8e 2f       	mov	r24, r30
  c6:	86 2b       	or	r24, r22
  c8:	84 2b       	or	r24, r20
}
  ca:	82 2b       	or	r24, r18
  cc:	08 95       	ret

000000ce <hastaTecla>:
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
  ce:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
  d0:	43 2f       	mov	r20, r19
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	03 2e       	mov	r0, r19
  da:	02 c0       	rjmp	.+4      	; 0xe0 <hastaTecla+0x12>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <hastaTecla+0xe>
  e4:	80 95       	com	r24
  e6:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  e8:	00 00       	nop
		asm("nop");
  ea:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  ec:	24 e0       	ldi	r18, 0x04	; 4
  ee:	36 c0       	rjmp	.+108    	; 0x15c <hastaTecla+0x8e>
			if(isClear(PINX, j)){
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	62 2f       	mov	r22, r18
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <hastaTecla+0x32>
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <hastaTecla+0x2e>
 104:	80 fd       	sbrc	r24, 0
 106:	29 c0       	rjmp	.+82     	; 0x15a <hastaTecla+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f e4       	ldi	r24, 0x4F	; 79
 10a:	93 ec       	ldi	r25, 0xC3	; 195
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <hastaTecla+0x3e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <hastaTecla+0x44>
 112:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINX, j));
 114:	89 b3       	in	r24, 0x19	; 25
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	06 2e       	mov	r0, r22
 11a:	02 c0       	rjmp	.+4      	; 0x120 <hastaTecla+0x52>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <hastaTecla+0x4e>
 124:	80 ff       	sbrs	r24, 0
 126:	f6 cf       	rjmp	.-20     	; 0x114 <hastaTecla+0x46>
 128:	8f e4       	ldi	r24, 0x4F	; 79
 12a:	93 ec       	ldi	r25, 0xC3	; 195
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <hastaTecla+0x5e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <hastaTecla+0x64>
 132:	00 00       	nop
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	86 1b       	sub	r24, r22
 13a:	97 0b       	sbc	r25, r23
 13c:	23 e0       	ldi	r18, 0x03	; 3
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	24 1b       	sub	r18, r20
 142:	35 0b       	sbc	r19, r21
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	80 5a       	subi	r24, 0xA0	; 160
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	fc 01       	movw	r30, r24
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	80 81       	ld	r24, Z
 158:	08 95       	ret
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	28 30       	cpi	r18, 0x08	; 8
 15e:	40 f2       	brcs	.-112    	; 0xf0 <hastaTecla+0x22>
};
uint8_t print(uint8_t cont){
	return (((cont & 1) << 5) | ((cont & 2) << 3) | ((cont & 4) << 1) | ((cont & 8) >> 1));
}
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 160:	3f 5f       	subi	r19, 0xFF	; 255
 162:	33 70       	andi	r19, 0x03	; 3
				while(isClear(PINX, j));
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 164:	b5 cf       	rjmp	.-150    	; 0xd0 <hastaTecla+0x2>

00000166 <main>:
}
int main(){
	DDRX = 0x0F;
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	8a bb       	out	0x1a, r24	; 26
	PORTX = 0xFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF;
 16e:	84 bb       	out	0x14, r24	; 20
	PORTC = (5 << 2);
 170:	84 e1       	ldi	r24, 0x14	; 20
 172:	85 bb       	out	0x15, r24	; 21
	uint8_t tecla, cont = 0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
	for(;;){
		PORTC = print(cont);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 41 00 	call	0x82	; 0x82 <print>
 17c:	85 bb       	out	0x15, r24	; 21
		tecla = hastaTecla();
 17e:	0e 94 67 00 	call	0xce	; 0xce <hastaTecla>
		if(tecla == 0x9 && cont < 9) cont++;
 182:	89 30       	cpi	r24, 0x09	; 9
 184:	19 f4       	brne	.+6      	; 0x18c <main+0x26>
 186:	c9 30       	cpi	r28, 0x09	; 9
 188:	08 f4       	brcc	.+2      	; 0x18c <main+0x26>
 18a:	cf 5f       	subi	r28, 0xFF	; 255
		if(tecla == 0x1 && cont > 0) cont--;
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	99 f7       	brne	.-26     	; 0x176 <main+0x10>
 190:	cc 23       	and	r28, r28
 192:	89 f3       	breq	.-30     	; 0x176 <main+0x10>
 194:	c1 50       	subi	r28, 0x01	; 1
 196:	ef cf       	rjmp	.-34     	; 0x176 <main+0x10>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
