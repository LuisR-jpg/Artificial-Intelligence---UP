
ServoKeyboardDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001a6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000629  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <hastaTecla>:
	{0x4, 0x5, 0x6, 0xB},
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
  82:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
  84:	43 2f       	mov	r20, r19
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	03 2e       	mov	r0, r19
  8e:	02 c0       	rjmp	.+4      	; 0x94 <hastaTecla+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <hastaTecla+0xe>
  98:	80 95       	com	r24
  9a:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  9c:	00 00       	nop
		asm("nop");
  9e:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  a0:	24 e0       	ldi	r18, 0x04	; 4
  a2:	36 c0       	rjmp	.+108    	; 0x110 <hastaTecla+0x8e>
			if(isClear(PINX, j)){
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	62 2f       	mov	r22, r18
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <hastaTecla+0x32>
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <hastaTecla+0x2e>
  b8:	80 fd       	sbrc	r24, 0
  ba:	29 c0       	rjmp	.+82     	; 0x10e <hastaTecla+0x8c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <hastaTecla+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <hastaTecla+0x44>
  c6:	00 00       	nop
				_delay_ms(50);
				while(isClear(PINX, j));
  c8:	89 b3       	in	r24, 0x19	; 25
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	06 2e       	mov	r0, r22
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <hastaTecla+0x52>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <hastaTecla+0x4e>
  d8:	80 ff       	sbrs	r24, 0
  da:	f6 cf       	rjmp	.-20     	; 0xc8 <hastaTecla+0x46>
  dc:	8f e4       	ldi	r24, 0x4F	; 79
  de:	93 ec       	ldi	r25, 0xC3	; 195
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <hastaTecla+0x5e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <hastaTecla+0x64>
  e6:	00 00       	nop
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	86 1b       	sub	r24, r22
  ee:	97 0b       	sbc	r25, r23
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	24 1b       	sub	r18, r20
  f6:	35 0b       	sbc	r19, r21
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	80 5a       	subi	r24, 0xA0	; 160
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	e2 0f       	add	r30, r18
 108:	f3 1f       	adc	r31, r19
 10a:	80 81       	ld	r24, Z
 10c:	08 95       	ret
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	28 30       	cpi	r18, 0x08	; 8
 112:	40 f2       	brcs	.-112    	; 0xa4 <hastaTecla+0x22>
	{0x4, 0x5, 0x6, 0xB},
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 114:	3f 5f       	subi	r19, 0xFF	; 255
 116:	33 70       	andi	r19, 0x03	; 3
				while(isClear(PINX, j));
				_delay_ms(50);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 118:	b5 cf       	rjmp	.-150    	; 0x84 <hastaTecla+0x2>

0000011a <main>:
}
int main(){
	DDRX = 0x0F;
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	8a bb       	out	0x1a, r24	; 26
	PORTX = DDRC = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	84 bb       	out	0x14, r24	; 20
 122:	8b bb       	out	0x1b, r24	; 27
	uint8_t tecla, cont = 0;
 124:	c0 e0       	ldi	r28, 0x00	; 0
	for(;;){
		PORTC = reverse(cont) >> 2;
 126:	2c 2f       	mov	r18, r28
 128:	2a 7a       	andi	r18, 0xAA	; 170
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	35 95       	asr	r19
 12e:	27 95       	ror	r18
 130:	8c 2f       	mov	r24, r28
 132:	85 75       	andi	r24, 0x55	; 85
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	28 2b       	or	r18, r24
 13c:	39 2b       	or	r19, r25
 13e:	c9 01       	movw	r24, r18
 140:	8c 7c       	andi	r24, 0xCC	; 204
 142:	99 27       	eor	r25, r25
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
 14c:	23 73       	andi	r18, 0x33	; 51
 14e:	33 27       	eor	r19, r19
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	82 2b       	or	r24, r18
 15a:	93 2b       	or	r25, r19
 15c:	9c 01       	movw	r18, r24
 15e:	22 95       	swap	r18
 160:	32 95       	swap	r19
 162:	30 7f       	andi	r19, 0xF0	; 240
 164:	32 27       	eor	r19, r18
 166:	20 7f       	andi	r18, 0xF0	; 240
 168:	32 27       	eor	r19, r18
 16a:	95 95       	asr	r25
 16c:	87 95       	ror	r24
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	95 95       	asr	r25
 174:	87 95       	ror	r24
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	82 2b       	or	r24, r18
 17c:	93 2b       	or	r25, r19
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	85 bb       	out	0x15, r24	; 21
		tecla = hastaTecla();
 188:	0e 94 41 00 	call	0x82	; 0x82 <hastaTecla>
		if(tecla == 0x09 && cont < 9) cont++;
 18c:	89 30       	cpi	r24, 0x09	; 9
 18e:	19 f4       	brne	.+6      	; 0x196 <main+0x7c>
 190:	c9 30       	cpi	r28, 0x09	; 9
 192:	08 f4       	brcc	.+2      	; 0x196 <main+0x7c>
 194:	cf 5f       	subi	r28, 0xFF	; 255
		if(tecla == 0x01 && cont > 0) cont--;
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	31 f6       	brne	.-116    	; 0x126 <main+0xc>
 19a:	cc 23       	and	r28, r28
 19c:	21 f2       	breq	.-120    	; 0x126 <main+0xc>
 19e:	c1 50       	subi	r28, 0x01	; 1
 1a0:	c2 cf       	rjmp	.-124    	; 0x126 <main+0xc>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
