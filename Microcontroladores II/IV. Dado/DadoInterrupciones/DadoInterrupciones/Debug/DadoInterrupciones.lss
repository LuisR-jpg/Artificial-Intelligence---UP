
DadoInterrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000360  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071b  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c8  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
  9c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
  a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end+0x2>
  a4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <print>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdlib.h>
#include <time.h>
uint8_t print(uint8_t n){
	switch(n){
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	71 f0       	breq	.+28     	; 0xd8 <print+0x20>
  bc:	28 f4       	brcc	.+10     	; 0xc8 <print+0x10>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	49 f0       	breq	.+18     	; 0xd4 <print+0x1c>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	99 f0       	breq	.+38     	; 0xec <print+0x34>
  c6:	10 c0       	rjmp	.+32     	; 0xe8 <print+0x30>
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	51 f0       	breq	.+20     	; 0xe0 <print+0x28>
  cc:	38 f0       	brcs	.+14     	; 0xdc <print+0x24>
  ce:	86 30       	cpi	r24, 0x06	; 6
  d0:	49 f0       	breq	.+18     	; 0xe4 <print+0x2c>
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <print+0x30>
		case 1: return 0b00001000;
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	08 95       	ret
		case 2: return 0b00010010;
		case 3: return 0b01001001;
  d8:	89 e4       	ldi	r24, 0x49	; 73
  da:	08 95       	ret
		case 4: return 0b01100011;
  dc:	83 e6       	ldi	r24, 0x63	; 99
  de:	08 95       	ret
		case 5: return 0b01101011;
  e0:	8b e6       	ldi	r24, 0x6B	; 107
  e2:	08 95       	ret
		case 6: return 0b01110111;
  e4:	87 e7       	ldi	r24, 0x77	; 119
  e6:	08 95       	ret
	}
	return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
#include <stdlib.h>
#include <time.h>
uint8_t print(uint8_t n){
	switch(n){
		case 1: return 0b00001000;
		case 2: return 0b00010010;
  ec:	82 e1       	ldi	r24, 0x12	; 18
		case 4: return 0b01100011;
		case 5: return 0b01101011;
		case 6: return 0b01110111;
	}
	return 0;
}
  ee:	08 95       	ret

000000f0 <__vector_1>:
ISR(INT0_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <__vector_1+0x26>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <__vector_1+0x2c>
 11c:	00 00       	nop
	_delay_ms(50);
	while(isClear(PIND, 2));
 11e:	82 9b       	sbis	0x10, 2	; 16
 120:	fe cf       	rjmp	.-4      	; 0x11e <__vector_1+0x2e>
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__vector_1+0x36>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_1+0x3c>
 12c:	00 00       	nop
	_delay_ms(50);
	PORTA = print(rand() % 6 + 1);
 12e:	0e 94 3b 01 	call	0x276	; 0x276 <rand>
 132:	66 e0       	ldi	r22, 0x06	; 6
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 c7 00 	call	0x18e	; 0x18e <__divmodhi4>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	0e 94 5c 00 	call	0xb8	; 0xb8 <print>
 140:	8b bb       	out	0x1b, r24	; 27
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:
int main(void)
{
	DDRA = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
 168:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0xFB;
 16a:	8b ef       	ldi	r24, 0xFB	; 251
 16c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 16e:	12 ba       	out	0x12, r1	; 18
	sei();
 170:	78 94       	sei
	GIFR = 0xE0;
 172:	80 ee       	ldi	r24, 0xE0	; 224
 174:	8a bf       	out	0x3a, r24	; 58
	MCUCR = 0x02;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40;
 17a:	80 e4       	ldi	r24, 0x40	; 64
 17c:	8b bf       	out	0x3b, r24	; 59
	srand(time(NULL));
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 49 00 	call	0x92	; 0x92 <time>
 186:	cb 01       	movw	r24, r22
 188:	0e 94 40 01 	call	0x280	; 0x280 <srand>
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x28>

0000018e <__divmodhi4>:
 18e:	97 fb       	bst	r25, 7
 190:	07 2e       	mov	r0, r23
 192:	16 f4       	brtc	.+4      	; 0x198 <__divmodhi4+0xa>
 194:	00 94       	com	r0
 196:	07 d0       	rcall	.+14     	; 0x1a6 <__divmodhi4_neg1>
 198:	77 fd       	sbrc	r23, 7
 19a:	09 d0       	rcall	.+18     	; 0x1ae <__divmodhi4_neg2>
 19c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__udivmodhi4>
 1a0:	07 fc       	sbrc	r0, 7
 1a2:	05 d0       	rcall	.+10     	; 0x1ae <__divmodhi4_neg2>
 1a4:	3e f4       	brtc	.+14     	; 0x1b4 <__divmodhi4_exit>

000001a6 <__divmodhi4_neg1>:
 1a6:	90 95       	com	r25
 1a8:	81 95       	neg	r24
 1aa:	9f 4f       	sbci	r25, 0xFF	; 255
 1ac:	08 95       	ret

000001ae <__divmodhi4_neg2>:
 1ae:	70 95       	com	r23
 1b0:	61 95       	neg	r22
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255

000001b4 <__divmodhi4_exit>:
 1b4:	08 95       	ret

000001b6 <__udivmodhi4>:
 1b6:	aa 1b       	sub	r26, r26
 1b8:	bb 1b       	sub	r27, r27
 1ba:	51 e1       	ldi	r21, 0x11	; 17
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <__udivmodhi4_ep>

000001be <__udivmodhi4_loop>:
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	a6 17       	cp	r26, r22
 1c4:	b7 07       	cpc	r27, r23
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <__udivmodhi4_ep>
 1c8:	a6 1b       	sub	r26, r22
 1ca:	b7 0b       	sbc	r27, r23

000001cc <__udivmodhi4_ep>:
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	5a 95       	dec	r21
 1d2:	a9 f7       	brne	.-22     	; 0x1be <__udivmodhi4_loop>
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	bc 01       	movw	r22, r24
 1da:	cd 01       	movw	r24, r26
 1dc:	08 95       	ret

000001de <do_rand>:
 1de:	8f 92       	push	r8
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	68 81       	ld	r22, Y
 1f6:	79 81       	ldd	r23, Y+1	; 0x01
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	9b 81       	ldd	r25, Y+3	; 0x03
 1fc:	61 15       	cp	r22, r1
 1fe:	71 05       	cpc	r23, r1
 200:	81 05       	cpc	r24, r1
 202:	91 05       	cpc	r25, r1
 204:	21 f4       	brne	.+8      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 206:	64 e2       	ldi	r22, 0x24	; 36
 208:	79 ed       	ldi	r23, 0xD9	; 217
 20a:	8b e5       	ldi	r24, 0x5B	; 91
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	2d e1       	ldi	r18, 0x1D	; 29
 210:	33 ef       	ldi	r19, 0xF3	; 243
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	0e 94 4b 01 	call	0x296	; 0x296 <__divmodsi4>
 21a:	49 01       	movw	r8, r18
 21c:	5a 01       	movw	r10, r20
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	a7 ea       	ldi	r26, 0xA7	; 167
 224:	b1 e4       	ldi	r27, 0x41	; 65
 226:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__muluhisi3>
 22a:	6b 01       	movw	r12, r22
 22c:	7c 01       	movw	r14, r24
 22e:	ac ee       	ldi	r26, 0xEC	; 236
 230:	b4 ef       	ldi	r27, 0xF4	; 244
 232:	a5 01       	movw	r20, r10
 234:	94 01       	movw	r18, r8
 236:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__mulohisi3>
 23a:	dc 01       	movw	r26, r24
 23c:	cb 01       	movw	r24, r22
 23e:	8c 0d       	add	r24, r12
 240:	9d 1d       	adc	r25, r13
 242:	ae 1d       	adc	r26, r14
 244:	bf 1d       	adc	r27, r15
 246:	b7 ff       	sbrs	r27, 7
 248:	03 c0       	rjmp	.+6      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	a1 09       	sbc	r26, r1
 24e:	b0 48       	sbci	r27, 0x80	; 128
 250:	88 83       	st	Y, r24
 252:	99 83       	std	Y+1, r25	; 0x01
 254:	aa 83       	std	Y+2, r26	; 0x02
 256:	bb 83       	std	Y+3, r27	; 0x03
 258:	9f 77       	andi	r25, 0x7F	; 127
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	bf 90       	pop	r11
 268:	af 90       	pop	r10
 26a:	9f 90       	pop	r9
 26c:	8f 90       	pop	r8
 26e:	08 95       	ret

00000270 <rand_r>:
 270:	0e 94 ef 00 	call	0x1de	; 0x1de <do_rand>
 274:	08 95       	ret

00000276 <rand>:
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 ef 00 	call	0x1de	; 0x1de <do_rand>
 27e:	08 95       	ret

00000280 <srand>:
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 288:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 28c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 290:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 294:	08 95       	ret

00000296 <__divmodsi4>:
 296:	05 2e       	mov	r0, r21
 298:	97 fb       	bst	r25, 7
 29a:	1e f4       	brtc	.+6      	; 0x2a2 <__divmodsi4+0xc>
 29c:	00 94       	com	r0
 29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__negsi2>
 2a2:	57 fd       	sbrc	r21, 7
 2a4:	07 d0       	rcall	.+14     	; 0x2b4 <__divmodsi4_neg2>
 2a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__udivmodsi4>
 2aa:	07 fc       	sbrc	r0, 7
 2ac:	03 d0       	rcall	.+6      	; 0x2b4 <__divmodsi4_neg2>
 2ae:	4e f4       	brtc	.+18     	; 0x2c2 <__divmodsi4_exit>
 2b0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__negsi2>

000002b4 <__divmodsi4_neg2>:
 2b4:	50 95       	com	r21
 2b6:	40 95       	com	r20
 2b8:	30 95       	com	r19
 2ba:	21 95       	neg	r18
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	4f 4f       	sbci	r20, 0xFF	; 255
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255

000002c2 <__divmodsi4_exit>:
 2c2:	08 95       	ret

000002c4 <__negsi2>:
 2c4:	90 95       	com	r25
 2c6:	80 95       	com	r24
 2c8:	70 95       	com	r23
 2ca:	61 95       	neg	r22
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	08 95       	ret

000002d4 <__muluhisi3>:
 2d4:	0e 94 9f 01 	call	0x33e	; 0x33e <__umulhisi3>
 2d8:	a5 9f       	mul	r26, r21
 2da:	90 0d       	add	r25, r0
 2dc:	b4 9f       	mul	r27, r20
 2de:	90 0d       	add	r25, r0
 2e0:	a4 9f       	mul	r26, r20
 2e2:	80 0d       	add	r24, r0
 2e4:	91 1d       	adc	r25, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	08 95       	ret

000002ea <__mulshisi3>:
 2ea:	b7 ff       	sbrs	r27, 7
 2ec:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__muluhisi3>

000002f0 <__mulohisi3>:
 2f0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__muluhisi3>
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	08 95       	ret

000002fa <__udivmodsi4>:
 2fa:	a1 e2       	ldi	r26, 0x21	; 33
 2fc:	1a 2e       	mov	r1, r26
 2fe:	aa 1b       	sub	r26, r26
 300:	bb 1b       	sub	r27, r27
 302:	fd 01       	movw	r30, r26
 304:	0d c0       	rjmp	.+26     	; 0x320 <__udivmodsi4_ep>

00000306 <__udivmodsi4_loop>:
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	ee 1f       	adc	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	a2 17       	cp	r26, r18
 310:	b3 07       	cpc	r27, r19
 312:	e4 07       	cpc	r30, r20
 314:	f5 07       	cpc	r31, r21
 316:	20 f0       	brcs	.+8      	; 0x320 <__udivmodsi4_ep>
 318:	a2 1b       	sub	r26, r18
 31a:	b3 0b       	sbc	r27, r19
 31c:	e4 0b       	sbc	r30, r20
 31e:	f5 0b       	sbc	r31, r21

00000320 <__udivmodsi4_ep>:
 320:	66 1f       	adc	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	1a 94       	dec	r1
 32a:	69 f7       	brne	.-38     	; 0x306 <__udivmodsi4_loop>
 32c:	60 95       	com	r22
 32e:	70 95       	com	r23
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	bd 01       	movw	r22, r26
 33a:	cf 01       	movw	r24, r30
 33c:	08 95       	ret

0000033e <__umulhisi3>:
 33e:	a2 9f       	mul	r26, r18
 340:	b0 01       	movw	r22, r0
 342:	b3 9f       	mul	r27, r19
 344:	c0 01       	movw	r24, r0
 346:	a3 9f       	mul	r26, r19
 348:	70 0d       	add	r23, r0
 34a:	81 1d       	adc	r24, r1
 34c:	11 24       	eor	r1, r1
 34e:	91 1d       	adc	r25, r1
 350:	b2 9f       	mul	r27, r18
 352:	70 0d       	add	r23, r0
 354:	81 1d       	adc	r24, r1
 356:	11 24       	eor	r1, r1
 358:	91 1d       	adc	r25, r1
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
