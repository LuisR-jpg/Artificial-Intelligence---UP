¿Qué es react?
Es una librería open-source diseñada para crear interfaces de usuario con el objetivo de facilitar el desarrollo de SPA's (Single Page Applications).

¿Qué es una SPA?
Una single page application o por sus siglas, SPA, se traduce a: aplicación de página única que basicamente es una aplicación web que cabe en una sola página con el proposito de dar una experienca mas fluida a los usuarios.
Página única != Ruta única

Pilares de React:
  Componentes
    Sirve para escalabilidad.
    Una sola página se divide en pequeños componentes, llamados átomos.
    Se programan con jsx, ya no se ocupará html.
  Estado interno
    Funciona como un conjunto de templates, donde cada uno tiene un estado interno específico.
  Propiedades inmutables
    Cómo se pasa la información de un componente a otro

Ventajas de react:
  Virtual DOM
    -> Solo refresca cada cambio, no todo DOM
  Componentización
    -> Permite diseñar los templates, un solo cambio modifica en todas las partes donde se ocupa
    -> Bloques de código que se pueden reutilizar, deben cumplir lo siguiente:
	Representarse a sí mismo
	Capacidad de manejar su estado interno (esto en caso de tenerlo)
	Capacidad de recibir propiedades inmutables (llamadas props)

  Templates dentro de Javascript
    -> Se programa un solo estilo que aplica para cada componente

Props:
  Es la forma que tenemos de pasar informacion entre componentes. Para recibir una prop (propiedad) en los componentes, se hace por parametro en un objeto llamado props
  Ejemplo:
    Child:
      function Child(props) {
	console.log(props)
	return (
	  <p>{props.propDePrueba}</p>
	)
      }
    Parent:
      <Child propdePrueba = "ValordePrueba/>

Hook: useState o Estado interno de un componente:
  Es la forma que tenemos de pasar información a lo largo de este. 
  Se divide en 3 etapas: 
    Inicialización, actualización (set) y lectura (get)
  En componentes funcionales se hace por medio del hook de React llamado: useState, para componentes de clase se hace haciendo un set del objeto state y actualizándolo con la función setState.
  Ejemplo:
    const [state, setState] = React.useState();
    State es el getter y setState el setter

Hook: useEffect:
  Es el hook que se encarga de manejar el ciclo de vida de un componente a través de una condición. 
  En este, vamos a poder ejecutar código al momento de terminar de montar el componente, con cada actualización del mismo basado en la condición. 
  Ejemplo:
    function Test() {
      useEffect(() => {
        // Código que se ejecuta al primer render (cuando se entra por primera vez a la pantalla)
      }, []) // aquí va la condición, si no se agrega quiere decir que sólo correrá la primer vez que se carga la página
    }

# Crear nuevo proyecto
npx create-react-app first-app
# Cuando corremos el proyecto de alguien: instala lo que venga en node_modules
npm install
# Correr la aplicacion
npm start


# Files
  //Se puede borrar
    app.test.js 
    reportWebVitals.js //Reporta cosas de cache
    setUpTest.js 
  //Qué y cómo se va a correr
    package.json
  //
    index.js //Borrar el último reportwebvitals
  //
    App.js
      Parece html pero es jsx
      Antes funcionaba con clases, ahora con funciones
      class (html) -> className (jsx)

# Tips and tricks
  ctrl + CursorsobreComponente: Muestra un desgloce 
  ctrl + clicksobreCompontente: Dirige a declaración de componnte 
  For the react components we can use:
    <div> or <> or <React.Fragment> or <Fragment>

